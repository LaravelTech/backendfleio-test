{"version":3,"sources":["./src/app/shared/fleio-api/billing/invoices/invoices-api.service.ts","./src/app/shared/fleio-api/billing/service-dynamic-usage/service-dynamic-usages-api.service.ts","./src/app/shared/fleio-api/billing/services/service-api.service.ts","./src/app/shared/fleio-api/cloud/image/image-api.service.ts","./src/app/shared/fleio-api/cloud/pricing-plan/pricing-plan.resolver.ts","./src/app/shared/fleio-api/cloud/pricing-plan/pricing-plans-api.service.ts","./src/app/shared/fleio-api/cloud/pricing-rule/pricing-rules-api.service.ts","./src/app/shared/fleio-api/cloud/volume/volumes-api.service.ts","./src/app/shared/ui/objects-view/actions/api-call-action.ts","./src/app/shared/ui/objects-view/list-base.ts","./src/app/shared/ui/objects-view/object-list-controller.ts"],"names":[],"mappings":"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","file":"common-es5.js","sourcesContent":["import { Injectable } from '@angular/core';\nimport { ConfigService } from '../../../config/config.service';\nimport { FleioApiService } from '../../fleio-api.service';\nimport { HttpClient } from '@angular/common/http';\nimport { IInvoiceModel } from '../model/invoice.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class InvoicesApiService extends FleioApiService<IInvoiceModel> {\n  // noinspection JSUnusedGlobalSymbols\n  constructor(protected httpClient: HttpClient, private config: ConfigService) {\n    super(config.getPanelApiUrl('billing/invoices'));\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { ConfigService } from '../../../config/config.service';\nimport { FleioApiService } from '../../fleio-api.service';\nimport { HttpClient } from '@angular/common/http';\nimport { IServiceDynamicUsageModel } from '../model/service-dynamic-usage.model';\nimport { Observable } from 'rxjs';\nimport { FleioObjectsList } from '../../fleio-objects-list';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ServiceDynamicUsagesApiService extends FleioApiService<IServiceDynamicUsageModel> {\n  // noinspection JSUnusedGlobalSymbols\n  constructor(protected httpClient: HttpClient, private config: ConfigService) {\n    super(config.getPanelApiUrl('openstack/billing/usage'));\n  }\n\n  getForClient(clientId: number): Observable<FleioObjectsList<IServiceDynamicUsageModel>> {\n    return this.list({ client_id: clientId, }, 'client' );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { ConfigService } from '../../../config/config.service';\nimport { FleioApiService } from '../../fleio-api.service';\nimport { HttpClient } from '@angular/common/http';\nimport { IServiceModel } from '../model/service.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ServicesApiService extends FleioApiService<IServiceModel> {\n  // noinspection JSUnusedGlobalSymbols\n  constructor(protected httpClient: HttpClient, private config: ConfigService) {\n    super(config.getPanelApiUrl('billing/services'));\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { ConfigService } from '../../../config/config.service';\nimport { FleioApiService } from '../../fleio-api.service';\nimport { HttpClient } from '@angular/common/http';\nimport { IImageModel } from '../model/image.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ImagesApiService extends FleioApiService<IImageModel> {\n  // noinspection JSUnusedGlobalSymbols\n  constructor(protected httpClient: HttpClient, private config: ConfigService) {\n    super(config.getPanelApiUrl('openstack/images'));\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, Resolve, RouterStateSnapshot } from '@angular/router';\nimport { Observable, of } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { IPricingPlanModel } from '../model/pricing-plan.model';\nimport { PricingPlansApiService } from './pricing-plans-api.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class PricingPlanResolver implements Resolve<IPricingPlanModel> {\n  constructor(private pricingPlansApiService: PricingPlansApiService) {\n  }\n\n  resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot):\n    Observable<IPricingPlanModel> | Promise<IPricingPlanModel> | IPricingPlanModel {\n    return this.pricingPlansApiService.get(route.params.id).pipe(catchError(() => of(null)));\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { IPricingPlanModel } from '../model/pricing-plan.model';\nimport { FleioApiService } from '../../fleio-api.service';\nimport { ConfigService } from '../../../config/config.service';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class PricingPlansApiService extends FleioApiService<IPricingPlanModel> {\n  // noinspection JSUnusedGlobalSymbols\n  constructor(protected httpClient: HttpClient, private config: ConfigService) {\n    super(config.getPanelApiUrl('openstack/billing/plan'));\n  }\n\n  getAlternativePlans(currentPlanId: number): Observable<IPricingPlanModel[]> {\n    return this.list().pipe(map(plans => {\n      const alternativePlans = [];\n\n      // TODO: do this query in backend\n      for (const plan of plans.objects){\n        if (plan.id !== currentPlanId) {\n          alternativePlans.push(plan);\n        }\n      }\n\n      return alternativePlans;\n    }));\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { FleioApiService } from '../../fleio-api.service';\nimport { ConfigService } from '../../../config/config.service';\nimport { IPricingRuleModel } from '../model/pricing-rule.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class PricingRulesApiService extends FleioApiService<IPricingRuleModel> {\n  // noinspection JSUnusedGlobalSymbols\n  constructor(protected httpClient: HttpClient, private config: ConfigService) {\n    super(config.getPanelApiUrl('openstack/billing/pricerule'));\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { ConfigService } from '../../../config/config.service';\nimport { FleioApiService } from '../../fleio-api.service';\nimport { HttpClient } from '@angular/common/http';\nimport { IVolumeModel } from '../model/volume.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class VolumesApiService extends FleioApiService<IVolumeModel> {\n  // noinspection JSUnusedGlobalSymbols\n  constructor(protected httpClient: HttpClient, private config: ConfigService) {\n    super(config.getPanelApiUrl('openstack/volumes'));\n  }\n}\n","import { BaseAction } from './base-action';\nimport { Observable, of } from 'rxjs';\nimport { IActionResult } from '../interfaces/actions/action-result';\nimport { map } from 'rxjs/operators';\nimport { FleioApiService } from '../../../fleio-api/fleio-api.service';\nimport { IBaseFleioObjectModel } from '../../../fleio-api/base-model/base-fleio-object.model';\n\nexport enum CallType {\n  Post,\n  Delete\n}\n\nexport class ApiCallAction extends BaseAction {\n  apiService: FleioApiService<IBaseFleioObjectModel>;\n  apiAction: string;\n  apiParams: {};\n  callType: CallType;\n  successMessage: string;\n  errorMessage: string;\n\n  constructor(init?: Partial<ApiCallAction>) {\n    super(init);\n    if (!this.callType) {\n      this.callType = CallType.Post;\n    }\n  }\n\n  executeImpl(): Observable<IActionResult> {\n    switch (this.callType) {\n      case CallType.Post:\n        return this.apiService.objectPostAction(this.object.id, this.apiAction, this.apiParams).pipe(\n          map(response => {\n            if (response.detail) {\n              return {message: response.detail};\n            } else {\n              console.warn('Unable to extract message from backend response');\n              console.warn(response);\n              return null;\n            }\n          })\n        );\n      case CallType.Delete:\n        return this.apiService.delete(this.object.id).pipe(map(success => {\n          let message: string;\n          if (success) {\n            message = this.successMessage || 'Object deleted successfully';\n          } else {\n            message = this.errorMessage || 'Failed to delete object';\n          }\n\n          return {message};\n        }));\n      default:\n        console.warn('Unsupported call type in action');\n        return of({message: 'Unsupported call type'});\n    }\n  }\n}\n","import { ObjectListController } from './object-list-controller';\nimport { ObjectController } from './object-controller';\nimport { ActivatedRoute } from '@angular/router';\nimport { OnDestroy, OnInit } from '@angular/core';\nimport { IObjectListUIService } from './interfaces/object-list-ui-service';\nimport { map } from 'rxjs/operators';\nimport { IBaseFleioObjectModel } from '../../fleio-api/base-model/base-fleio-object.model';\nimport { RefreshService } from '../../ui-api/refresh.service';\n\nexport class ListBase<ObjectType extends IBaseFleioObjectModel> implements OnDestroy, OnInit {\n  protected objectListController: ObjectListController<ObjectController>;\n  private readonly baseRoute: ActivatedRoute;\n  private readonly baseRefreshService: RefreshService;\n  private readonly objectListUIService: IObjectListUIService;\n  private readonly listName: string;\n  private readonly refreshInterval: number;\n\n  constructor(\n    route: ActivatedRoute, objectListUIService: IObjectListUIService, refreshService: RefreshService,\n    listName: string, refreshInterval: number = 10000,\n  ) {\n    this.baseRoute = route;\n    this.objectListUIService = objectListUIService;\n    this.baseRefreshService = refreshService;\n    this.listName = listName;\n    this.refreshInterval = refreshInterval;\n  }\n\n  ngOnInit() {\n    this.objectListController = new ObjectListController<ObjectController>(\n      this.baseRoute.data.pipe(map(routeData => {\n        if (!routeData[this.listName]) {\n          console.error(`Route data has no member named '${this.listName}'`);\n        }\n        return routeData[this.listName];\n      })),\n      this.objectListUIService\n    );\n    this.baseRefreshService.startRefreshTimer(this.refreshInterval);\n  }\n\n  ngOnDestroy(): void {\n    if (this.objectListController) {\n      this.objectListController.unsubscribe();\n      this.objectListController = null;\n    }\n    this.baseRefreshService.stopRefreshTimer();\n  }\n}\n","import { IObjectListController } from './interfaces/object-list-controller';\nimport { IBaseFleioObjectModel } from '../../fleio-api/base-model/base-fleio-object.model';\nimport { IObjectController } from './interfaces/object-controller';\nimport { ObjectController } from './object-controller';\nimport { FleioObjectsList } from '../../fleio-api/fleio-objects-list';\nimport { IObjectListUIService } from './interfaces/object-list-ui-service';\nimport { IPermissionsModel } from '../../fleio-api/base-model/IPermissionsModel';\nimport { BehaviorSubject, Observable, of, Subscription } from 'rxjs';\nimport { ITableData } from './interfaces/table-data/table-data';\nimport { IAction } from './interfaces/actions/action';\nimport { ISummaryCardData } from './interfaces/card-data/summary-card-data';\n\nexport class ObjectListController<ObjectControllerType extends ObjectController> implements IObjectListController {\n  private permissions: IPermissionsModel;\n\n  private readonly objectListSubscription: Subscription;\n  private readonly objectListUIService: IObjectListUIService;\n  private readonly tableDataBS: BehaviorSubject<ITableData> = new BehaviorSubject<ITableData>(null);\n  private readonly cardViewDataBS:\n    BehaviorSubject<ISummaryCardData[]> = new BehaviorSubject<ISummaryCardData[]>([]);\n\n  objectList: FleioObjectsList<IBaseFleioObjectModel>;\n  cardViewData$ = this.cardViewDataBS.asObservable();\n  tableData$ = this.tableDataBS.asObservable();\n\n  constructor(\n    objectsList$: Observable<FleioObjectsList<IBaseFleioObjectModel>>,\n    objectListUIService: IObjectListUIService,\n  ) {\n    this.objectListUIService = objectListUIService;\n    this.objectListSubscription = objectsList$.subscribe(objectsList => {\n      if (objectsList) {\n        this.objectList = objectsList;\n        this.permissions = objectsList.permissions;\n        this.tableDataBS.next(this.objectListUIService.getTableData(objectsList));\n        this.cardViewDataBS.next(this.getCardViewData());\n      }\n    });\n  }\n\n  protected getCardViewData(): ISummaryCardData[] {\n    const cardViewData: ISummaryCardData[] = [];\n\n    for (const object of this.objects) {\n      cardViewData.push(this.controller(object, 'card-view').getSummaryCardData());\n    }\n\n    return cardViewData;\n  }\n\n  public unsubscribe() {\n    this.objectListSubscription.unsubscribe();\n  }\n\n  get objects(): IBaseFleioObjectModel[] {\n    if (this.objectList) {\n      return this.objectList.objects;\n    } else {\n      return [];\n    }\n  }\n\n  controller(object: IBaseFleioObjectModel, state?: string): IObjectController {\n    return new ObjectController(of({object, permissions: this.permissions}), this.objectListUIService, state);\n  }\n\n  actions(): IAction[] {\n    return this.objectListUIService.getActions(this.objectList);\n  }\n}\n"],"sourceRoot":""}