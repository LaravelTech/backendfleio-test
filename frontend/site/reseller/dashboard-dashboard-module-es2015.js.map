{"version":3,"sources":["./node_modules/angular-gridster2/fesm2015/angular-gridster2.js","./src/app/reseller/dashboard/dashboard/clients-panel/clients-panel.component.html","./src/app/reseller/dashboard/dashboard/dashboard.component.html","./src/app/reseller/dashboard/dashboard/invoices-panel/invoices-panel.component.html","./src/app/reseller/dashboard/dashboard-routing.module.ts","./src/app/reseller/dashboard/dashboard.module.ts","./src/app/reseller/dashboard/dashboard/clients-panel/clients-panel.component.scss","./src/app/reseller/dashboard/dashboard/clients-panel/clients-panel.component.ts","./src/app/reseller/dashboard/dashboard/dashboard.component.scss","./src/app/reseller/dashboard/dashboard/dashboard.component.ts","./src/app/reseller/dashboard/dashboard/invoices-panel/invoices-panel.component.scss","./src/app/reseller/dashboard/dashboard/invoices-panel/invoices-panel.component.ts"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAoJ;AACrG;;AAE/C;AACA;AACA,cAAc,wGAAwG;AACtH;AACA,WAAW,OAAO;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B,WAAW,EAsIV;AACD;AACA;AACA;AACA,qBAAqB;AACrB,WAAW,EASV;AACD;AACA;AACA;AACA,sBAAsB;AACtB,WAAW,EAWV;AACD;AACA;AACA;AACA,sBAAsB;AACtB,WAAW,EAGV;AACD;AACA;AACA;AACA,2BAA2B;AAC3B,WAAW,EASV;;AAED;AACA;AACA,cAAc,wGAAwG;AACtH;AACA,WAAW,EAAE;AACbsCAAsC;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,mDAAmD;AACxE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA,oBAAoB;AACpB;AACA;AACA,uBAAuB,EAAE;AACzB;AACA,uBAAuB,EAAE;AACzB;AACA,uBAAuB,EAAE;AACzB;AACA,wBAAwB;AACxB;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,SAAS;AACT;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,OAAO,wDAAU;AACtB;;AAEA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EA2EV;;AAED;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA,aAAa;AACb;AACA,wBAAwB;AACxB;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,OAAO,wDAAU;AACtB;AACA;AACA;AACA,KAAK;AACL;AACA,WAAW,EAgCV;;AAED;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,uBAAuB,OAAO;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,uBAAuB,OAAO;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,uBAAuB,OAAO;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,OAAO,wDAAU;AACtB;AACA;AACA;AACA,KAAK;AACL;AACA,WAAW,EAMV;;AAED;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA,uBAAuB,EAAE;AACzB;AACA,uBAAuB,EAAE;AACzB;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,+BAA+B,wDAAwD,qLAAqL;AAC5Q;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,+BAA+B,wDAAwD,wLAAwL;AAC/Q;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,OAAO,wDAAU;AACtB;AACA;AACA;AACA,KAAK;AACL;AACA,WAAW,EAMV;;AAED;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,cAAc,mBAAmB;AACjC;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,cAAc,mBAAmB;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,cAAc,mBAAmB;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,cAAc,mBAAmB;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,cAAc,mBAAmB;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA,sDAAsD;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,cAAc,uBAAuB;AACrC;AACA;AACA,kBAAkB,0BAA0B;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB,wCAAwC;AACxC;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB,4BAA4B;AAC5B;AACA,mBAAmB,EAAE;AACrB,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA,uBAAuB,EAAE;AACzB,gCAAgC;AAChC;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,mBAAmB,EAAE;AACrB,wCAAwC;AACxC;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,cAAc,mBAAmB;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,OAAO,uDAAS;AACrB;AACA,6FAA6F,eAAe,2HAA2H,eAAe;AACtP,+BAA+B,+DAAiB;AAChD,mCAAmC,kBAAkB,sBAAsB,gBAAgB,WAAW,YAAY,yBAAyB,sBAAsB,qBAAqB,iBAAiB,cAAc,aAAa,kBAAkB,kBAAkB,wBAAwB,kBAAkB,gBAAgB,0BAA0B,gBAAgB,kBAAkB,eAAe,cAAc,gBAAgB,kBAAkB,gBAAgB,8BAA8B,kBAAkB,iDAAiD,kBAAkB,aAAa,eAAe,sBAAsB,2EAA2E,cAAc,0BAA0B,2BAA2B,4BAA4B,uBAAuB,0BAA0B,6BAA6B;AACx2B,aAAa;AACb;AACA;AACA;AACA,KAAK,OAAO,wDAAU,gBAAgB,OAAO,oDAAM,SAAS,wDAAU,IAAI,GAAG;AAC7E,KAAK,OAAO,uDAAS,gBAAgB,OAAO,oDAAM,SAAS,uDAAS,IAAI,GAAG;AAC3E,KAAK,OAAO,+DAAiB,gBAAgB,OAAO,oDAAM,SAAS,+DAAiB,IAAI,GAAG;AAC3F,KAAK,OAAO,oDAAM,gBAAgB,OAAO,oDAAM,SAAS,oDAAM,IAAI;AAClE;AACA;AACA,eAAe,OAAO,mDAAK,EAAE;AAC7B;AACA,WAAW,EAiDV;;AAED;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAqCV;;AAED;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA,uBAAuB,EAAE;AACzB;AACA,uBAAuB,EAAE;AACzB;AACA,uBAAuB,EAAE;AACzB;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,OAAO,wDAAU;AACtB;AACA;AACA;AACA,KAAK;AACL;AACA,WAAW,EAgBV;;AAED;AACA;AACA,cAAc,wGAAwG;AACtH;AACA,WAAW,EAAE;AACb;AACA,WAAW,EAAE;AACb;AACA,WAAW,EAAE;AACb;AACA,WAAW,EAAE;AACb;AACA,WAAW,EAAE;AACb;AACA,WAAW,EAAE;AACb;AACA,WAAW,EAAE;AACb;AACA,WAAW,EAAE;AACb;AACA,WAAW,EAAE;AACb;AACA,WAAW,EAAE;AACb;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,GAAG;AACd,WAAW,GAAG;AACd,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA,eAAe,EAAE;AACjB;AACA,eAAe,EAAE;AACjB;AACA,eAAe,EAAE;AACjB;AACA,eAAe,EAAE;AACjB;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,+CAA+C;AAC9E,KAAK;AACL;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,+CAA+C;AAC9E,KAAK;AACL;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,cAAc,OAAO;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,cAAc,OAAO;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,EAAE;AAC7B;AACA,sBAAsB,QAAQ;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA,0CAA0C,mDAAmD;AAC7F;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA,wCAAwC,2DAA2D;AACnG,iBAAiB,mDAAmD;AACpE;AACA;AACA,uBAAuB,EAAE;AACzB;AACA,0CAA0C,mDAAmD;AAC7F;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,OAAO,wDAAU;AACtB;AACA;AACA;AACA,KAAK;AACL;AACA,WAAW,EAiDV;;AAED;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,qEAAqE;AAC7F;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,6DAA6D;AAC7F;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA,SAAS;AACT,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,OAAO,wDAAU;AACtB;AACA;AACA;AACA,KAAK,uCAAuC;AAC5C,KAAK,mCAAmC;AACxC,KAAK,OAAO,oDAAM;AAClB;AACA,WAAW,EAwEV;;AAED;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,cAAc,OAAO;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,cAAc,OAAO;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,OAAO,wDAAU;AACtB;AACA;AACA;AACA,KAAK;AACL;AACA,WAAW,EAkCV;;AAED;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC;AACtC;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA,SAAS;AACT,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,OAAO,wDAAU;AACtB;AACA;AACA;AACA,KAAK,uCAAuC;AAC5C,KAAK,mCAAmC;AACxC,KAAK,OAAO,oDAAM;AAClB;AACA,WAAW,EA0EV;;AAED;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,OAAO,uDAAS;AACrB;AACA;AACA,+BAA+B,+DAAiB;AAChD,wCAAwC,sBAAsB,UAAU,kBAAkB,gBAAgB,eAAe,aAAa,gBAAgB,yBAAyB,sBAAsB,qBAAqB,iBAAiB,mCAAmC,YAAY,wEAAwE,gBAAgB,UAAU,gGAAgG,iCAAiC,kBAAkB,UAAU,0CAA0C,gBAAgB,YAAY,QAAQ,MAAM,OAAO,0CAA0C,gBAAgB,WAAW,SAAS,QAAQ,MAAM,0CAA0C,gBAAgB,YAAY,QAAQ,SAAS,OAAO,0CAA0C,gBAAgB,WAAW,OAAO,MAAM,SAAS,2CAA2C,iBAAiB,WAAW,YAAY,QAAQ,MAAM,2CAA2C,iBAAiB,WAAW,YAAY,OAAO,MAAM,2CAA2C,iBAAiB,QAAQ,SAAS,QAAQ,SAAS,mBAAmB,2BAA2B,yBAAyB,2CAA2C,iBAAiB,WAAW,YAAY,OAAO,SAAS,+DAA+D,0CAA0C;AAC37C,aAAa;AACb;AACA;AACA;AACA,KAAK,OAAO,wDAAU,gBAAgB,OAAO,oDAAM,SAAS,wDAAU,IAAI,GAAG;AAC7E,KAAK,0BAA0B;AAC/B,KAAK,OAAO,uDAAS,gBAAgB,OAAO,oDAAM,SAAS,uDAAS,IAAI,GAAG;AAC3E,KAAK,OAAO,oDAAM,gBAAgB,OAAO,oDAAM,SAAS,oDAAM,IAAI;AAClE;AACA;AACA,YAAY,OAAO,mDAAK,EAAE;AAC1B;AACA,WAAW,EAgCV;;AAED;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,OAAO,uDAAS;AACrB;AACA;AACA,+BAA+B,+DAAiB;AAChD,2CAA2C,kBAAkB,aAAa,2BAA2B;AACrG,aAAa;AACb;AACA;AACA;AACA,KAAK,OAAO,wDAAU,gBAAgB,OAAO,oDAAM,SAAS,wDAAU,IAAI,GAAG;AAC7E,KAAK,0BAA0B;AAC/B,KAAK,OAAO,uDAAS,gBAAgB,OAAO,oDAAM,SAAS,uDAAS,IAAI;AACxE;AACA,WAAW,EAOV;;AAED;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA;AACA,KAAK,OAAO,sDAAQ;AACpB;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,4DAAY;AAChC;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;;AAEA;AACA;AACA,cAAc,wGAAwG;AACtH;;AAEA;AACA;AACA,cAAc,wGAAwG;AACtH;;AAE2Q;AAC3Q;;;;;;;;;;;;ACjlJA,2QAA2Q,qBAAqB,kPAAkP,gBAAgB,wIAAwI,2BAA2B,qB;;;;;;;;;;;ACArsB,+TAA+T,YAAY,ghB;;;;;;;;;;;ACA3U,2QAA2Q,qBAAqB,kPAAkP,gBAAgB,wIAAwI,2BAA2B,qB;;;;;;;;;;;;;;;;;;;ACA5pB;AACc;AACc;AAErE,MAAM,MAAM,GAAW;IACrB;QACE,IAAI,EAAE,EAAE;QACR,SAAS,EAAE,iFAAkB;KAC9B;CACF,CAAC;AAMF,IAAa,sBAAsB,GAAnC,MAAa,sBAAsB;CAAI;AAA1B,sBAAsB;IAJlC,8DAAQ,CAAC;QACR,OAAO,EAAE,CAAC,4DAAY,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;QACxC,OAAO,EAAE,CAAC,4DAAY,CAAC;KACxB,CAAC;GACW,sBAAsB,CAAI;AAAJ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACfM;AACM;AACsB;AACD;AACjB;AACQ;AACJ;AACmC;AACL;AAC5B;AACP;AAC2C;AAuB7F,IAAa,eAAe,GAA5B,MAAa,eAAe;CAAI;AAAnB,eAAe;IArB3B,8DAAQ,CAAC;QACR,YAAY,EAAE;YACZ,iFAAkB;YAClB,sGAAqB;YACrB,0GAAsB;SACvB;QACD,OAAO,EAAE;YACP,4DAAY;YACZ,gFAAsB;YACtB,gEAAc;YACd,wEAAe;YACf,oEAAa;YACb,6FAAiB;YACjB,uEAAc;YACd,gEAAU;SACX;QACD,eAAe,EAAE;YACf,sGAAqB;YACrB,0GAAsB;SACvB;KACF,CAAC;GACW,eAAe,CAAI;AAAJ;;;;;;;;;;;;AClC5B,+DAA+D,uM;;;;;;;;;;;;;;;;;;ACAb;AACsD;AAOxG,IAAa,qBAAqB,GAAlC,MAAa,qBAAqB;IAMhC,YAAoB,cAAiC;QAAjC,mBAAc,GAAd,cAAc,CAAmB;QALrD,cAAS,GAGH,EAAE,CAAC;QACT,qBAAgB,GAAa,CAAC,aAAa,EAAE,QAAQ,CAAC,CAAC;IACE,CAAC;IAE1D,QAAQ;QACN,IAAI,CAAC,cAAc,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC,SAAS,CAAC,QAAQ,CAAC,EAAE;YAC5D,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC;gBAClB,WAAW,EAAE,eAAe;gBAC5B,MAAM,EAAE,QAAQ,CAAC,KAAK;aACvB,CAAC,CAAC;YACH,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC;gBAClB,WAAW,EAAE,aAAa;gBAC1B,MAAM,EAAE,QAAQ,CAAC,GAAG;aACrB,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC;CAEF;;YAfqC,0GAAiB;;AAN1C,qBAAqB;IALjC,+DAAS,CAAC;QACT,QAAQ,EAAE,mBAAmB;QAC7B,sMAA6C;;KAE9C,CAAC;GACW,qBAAqB,CAqBjC;AArBiC;;;;;;;;;;;;ACRlC,sCAAsC,kBAAkB,sBAAsB,yBAAyB,GAAG,iCAAiC,4BAA4B,sBAAsB,GAAG,4BAA4B,uBAAuB,GAAG,+BAA+B,uBAAuB,WAAW,aAAa,GAAG,0BAA0B,uBAAuB,cAAc,oBAAoB,eAAe,GAAG,6CAA6C,+wD;;;;;;;;;;;;;;;;;;;ACAva;AAE8B;AACG;AAOnF,IAAa,kBAAkB,GAA/B,MAAa,kBAAkB;IAI7B,gBAAgB,CAAC;IACjB,UAAU,CAAC,IAAI,EAAE,aAAa;IAC9B,CAAC;IACD,UAAU,CAAC,IAAI,EAAE,aAAa;IAC9B,CAAC;IACD,UAAU,CAAC,KAAK,EAAE,IAAI;QACrB,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC;IACxD,CAAC;IACD,cAAc;IACd,4BAA4B;IAC5B,IAAI;IAEJ,QAAQ;QACN,IAAI,CAAC,OAAO,GAAG;YACb,kBAAkB,EAAE,IAAI,CAAC,UAAU;YACnC,kBAAkB,EAAE,IAAI,CAAC,UAAU;YACnC,OAAO,EAAE,EAAE;YACX,OAAO,EAAE,CAAC;YACV,WAAW,EAAE,MAAM;YACnB,SAAS,EAAE;gBACT,OAAO,EAAE,IAAI;aACd;SACD,CAAC;QACH,IAAI,CAAC,SAAS,GAAG;YACf;gBACE,KAAK,EAAE,SAAS;gBAChB,SAAS,EAAE,4FAAqB;gBAChC,IAAI,EAAE,CAAC;gBACP,IAAI,EAAE,EAAE;gBACR,CAAC,EAAE,CAAC;gBACJ,aAAa,EAAE,KAAK;gBACpB,CAAC,EAAE,CAAC;aACL;YACD;gBACE,KAAK,EAAE,UAAU;gBACjB,SAAS,EAAE,+FAAsB;gBACjC,IAAI,EAAE,CAAC;gBACP,IAAI,EAAE,EAAE;gBACR,aAAa,EAAE,KAAK;gBACpB,CAAC,EAAE,CAAC;gBACJ,CAAC,EAAE,CAAC;aACL;SACF,CAAC;IACJ,CAAC;CAEF;AAjDY,kBAAkB;IAL9B,+DAAS,CAAC;QACT,QAAQ,EAAE,eAAe;QACzB,gLAAyC;;KAE1C,CAAC;GACW,kBAAkB,CAiD9B;AAjD8B;;;;;;;;;;;;ACV/B,+DAA+D,2M;;;;;;;;;;;;;;;;;;ACAb;AACsD;AAcxG,IAAa,sBAAsB,GAAnC,MAAa,sBAAsB;IAMjC,YAAoB,WAA+B;QAA/B,gBAAW,GAAX,WAAW,CAAoB;QALnD,cAAS,GAGH,EAAE,CAAC;QACT,qBAAgB,GAAa,CAAC,aAAa,EAAE,QAAQ,CAAC,CAAC;IACA,CAAC;IAExD,QAAQ;QACN,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC,SAAS,CAAC,CAAC,QAAkC,EAAE,EAAE;YACrF,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC;gBAClB,WAAW,EAAE,MAAM;gBACnB,MAAM,EAAE,QAAQ,CAAC,IAAI;aACtB,CAAC,CAAC;YACH,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC;gBAClB,WAAW,EAAE,QAAQ;gBACrB,MAAM,EAAE,QAAQ,CAAC,MAAM;aACxB,CAAC,CAAC;YACH,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC;gBAClB,WAAW,EAAE,WAAW;gBACxB,MAAM,EAAE,QAAQ,CAAC,SAAS;aAC3B,CAAC,CAAC;YACH,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC;gBAClB,WAAW,EAAE,UAAU;gBACvB,MAAM,EAAE,QAAQ,CAAC,QAAQ;aAC1B,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC;CAEF;;YAvBkC,0GAAkB;;AANxC,sBAAsB;IALlC,+DAAS,CAAC;QACT,QAAQ,EAAE,oBAAoB;QAC9B,yMAA8C;;KAE/C,CAAC;GACW,sBAAsB,CA6BlC;AA7BkC","file":"dashboard-dashboard-module-es2015.js","sourcesContent":["import { Injectable, Component, ViewEncapsulation, ElementRef, Inject, Renderer2, ChangeDetectorRef, NgZone, Input, NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @enum {string} */\nconst GridType = {\n    Fit: 'fit',\n    ScrollVertical: 'scrollVertical',\n    ScrollHorizontal: 'scrollHorizontal',\n    Fixed: 'fixed',\n    VerticalFixed: 'verticalFixed',\n    HorizontalFixed: 'horizontalFixed',\n};\n/** @enum {string} */\nconst DisplayGrid = {\n    Always: 'always',\n    OnDragAndResize: 'onDrag&Resize',\n    None: 'none',\n};\n/** @enum {string} */\nconst CompactType = {\n    None: 'none',\n    CompactUp: 'compactUp',\n    CompactLeft: 'compactLeft',\n    CompactUpAndLeft: 'compactUp&Left',\n    CompactLeftAndUp: 'compactLeft&Up',\n    CompactRight: 'compactRight',\n    CompactUpAndRight: 'compactUp&Right',\n    CompactRightAndUp: 'compactRight&Up',\n};\n/**\n * @record\n */\nfunction GridsterConfig() { }\nif (false) {\n    /** @type {?|undefined} */\n    GridsterConfig.prototype.gridType;\n    /** @type {?|undefined} */\n    GridsterConfig.prototype.fixedColWidth;\n    /** @type {?|undefined} */\n    GridsterConfig.prototype.fixedRowHeight;\n    /** @type {?|undefined} */\n    GridsterConfig.prototype.keepFixedHeightInMobile;\n    /** @type {?|undefined} */\n    GridsterConfig.prototype.keepFixedWidthInMobile;\n    /** @type {?|undefined} */\n    GridsterConfig.prototype.setGridSize;\n    /** @type {?|undefined} */\n    GridsterConfig.prototype.compactType;\n    /** @type {?|undefined} */\n    GridsterConfig.prototype.mobileBreakpoint;\n    /** @type {?|undefined} */\n    GridsterConfig.prototype.minCols;\n    /** @type {?|undefined} */\n    GridsterConfig.prototype.maxCols;\n    /** @type {?|undefined} */\n    GridsterConfig.prototype.minRows;\n    /** @type {?|undefined} */\n    GridsterConfig.prototype.maxRows;\n    /** @type {?|undefined} */\n    GridsterConfig.prototype.defaultItemCols;\n    /** @type {?|undefined} */\n    GridsterConfig.prototype.defaultItemRows;\n    /** @type {?|undefined} */\n    GridsterConfig.prototype.maxItemCols;\n    /** @type {?|undefined} */\n    GridsterConfig.prototype.maxItemRows;\n    /** @type {?|undefined} */\n    GridsterConfig.prototype.minItemCols;\n    /** @type {?|undefined} */\n    GridsterConfig.prototype.minItemRows;\n    /** @type {?|undefined} */\n    GridsterConfig.prototype.minItemArea;\n    /** @type {?|undefined} */\n    GridsterConfig.prototype.maxItemArea;\n    /** @type {?|undefined} */\n    GridsterConfig.prototype.margin;\n    /** @type {?|undefined} */\n    GridsterConfig.prototype.outerMargin;\n    /** @type {?|undefined} */\n    GridsterConfig.prototype.outerMarginTop;\n    /** @type {?|undefined} */\n    GridsterConfig.prototype.outerMarginRight;\n    /** @type {?|undefined} */\n    GridsterConfig.prototype.outerMarginBottom;\n    /** @type {?|undefined} */\n    GridsterConfig.prototype.outerMarginLeft;\n    /** @type {?|undefined} */\n    GridsterConfig.prototype.useTransformPositioning;\n    /** @type {?|undefined} */\n    GridsterConfig.prototype.scrollSensitivity;\n    /** @type {?|undefined} */\n    GridsterConfig.prototype.scrollSpeed;\n    /** @type {?|undefined} */\n    GridsterConfig.prototype.initCallback;\n    /** @type {?|undefined} */\n    GridsterConfig.prototype.destroyCallback;\n    /** @type {?|undefined} */\n    GridsterConfig.prototype.gridSizeChangedCallback;\n    /** @type {?|undefined} */\n    GridsterConfig.prototype.itemChangeCallback;\n    /** @type {?|undefined} */\n    GridsterConfig.prototype.itemResizeCallback;\n    /** @type {?|undefined} */\n    GridsterConfig.prototype.itemInitCallback;\n    /** @type {?|undefined} */\n    GridsterConfig.prototype.itemRemovedCallback;\n    /** @type {?|undefined} */\n    GridsterConfig.prototype.itemValidateCallback;\n    /** @type {?|undefined} */\n    GridsterConfig.prototype.draggable;\n    /** @type {?|undefined} */\n    GridsterConfig.prototype.resizable;\n    /** @type {?|undefined} */\n    GridsterConfig.prototype.swap;\n    /** @type {?|undefined} */\n    GridsterConfig.prototype.swapWhileDragging;\n    /** @type {?|undefined} */\n    GridsterConfig.prototype.pushItems;\n    /** @type {?|undefined} */\n    GridsterConfig.prototype.disablePushOnDrag;\n    /** @type {?|undefined} */\n    GridsterConfig.prototype.disablePushOnResize;\n    /** @type {?|undefined} */\n    GridsterConfig.prototype.disableAutoPositionOnConflict;\n    /** @type {?|undefined} */\n    GridsterConfig.prototype.pushDirections;\n    /** @type {?|undefined} */\n    GridsterConfig.prototype.pushResizeItems;\n    /** @type {?|undefined} */\n    GridsterConfig.prototype.displayGrid;\n    /** @type {?|undefined} */\n    GridsterConfig.prototype.disableWindowResize;\n    /** @type {?|undefined} */\n    GridsterConfig.prototype.disableWarnings;\n    /** @type {?|undefined} */\n    GridsterConfig.prototype.scrollToNewItems;\n    /** @type {?|undefined} */\n    GridsterConfig.prototype.disableScrollHorizontal;\n    /** @type {?|undefined} */\n    GridsterConfig.prototype.disableScrollVertical;\n    /** @type {?|undefined} */\n    GridsterConfig.prototype.enableEmptyCellClick;\n    /** @type {?|undefined} */\n    GridsterConfig.prototype.enableEmptyCellContextMenu;\n    /** @type {?|undefined} */\n    GridsterConfig.prototype.enableEmptyCellDrop;\n    /** @type {?|undefined} */\n    GridsterConfig.prototype.enableEmptyCellDrag;\n    /** @type {?|undefined} */\n    GridsterConfig.prototype.enableOccupiedCellDrop;\n    /** @type {?|undefined} */\n    GridsterConfig.prototype.emptyCellClickCallback;\n    /** @type {?|undefined} */\n    GridsterConfig.prototype.emptyCellContextMenuCallback;\n    /** @type {?|undefined} */\n    GridsterConfig.prototype.emptyCellDropCallback;\n    /** @type {?|undefined} */\n    GridsterConfig.prototype.emptyCellDragCallback;\n    /** @type {?|undefined} */\n    GridsterConfig.prototype.emptyCellDragMaxCols;\n    /** @type {?|undefined} */\n    GridsterConfig.prototype.emptyCellDragMaxRows;\n    /** @type {?|undefined} */\n    GridsterConfig.prototype.ignoreMarginInRow;\n    /** @type {?|undefined} */\n    GridsterConfig.prototype.api;\n    /* Skipping unhandled member: [propName: string]: any;*/\n}\n/**\n * @record\n */\nfunction DragBase() { }\nif (false) {\n    /** @type {?|undefined} */\n    DragBase.prototype.enabled;\n    /** @type {?|undefined} */\n    DragBase.prototype.stop;\n    /** @type {?|undefined} */\n    DragBase.prototype.start;\n    /** @type {?|undefined} */\n    DragBase.prototype.delayStart;\n}\n/**\n * @record\n */\nfunction Draggable() { }\nif (false) {\n    /** @type {?|undefined} */\n    Draggable.prototype.ignoreContentClass;\n    /** @type {?|undefined} */\n    Draggable.prototype.ignoreContent;\n    /** @type {?|undefined} */\n    Draggable.prototype.dragHandleClass;\n    /** @type {?|undefined} */\n    Draggable.prototype.dropOverItems;\n    /** @type {?|undefined} */\n    Draggable.prototype.dropOverItemsCallback;\n}\n/**\n * @record\n */\nfunction Resizable() { }\nif (false) {\n    /** @type {?|undefined} */\n    Resizable.prototype.handles;\n}\n/**\n * @record\n */\nfunction PushDirections() { }\nif (false) {\n    /** @type {?} */\n    PushDirections.prototype.north;\n    /** @type {?} */\n    PushDirections.prototype.east;\n    /** @type {?} */\n    PushDirections.prototype.south;\n    /** @type {?} */\n    PushDirections.prototype.west;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst GridsterConfigService = {\n    gridType: GridType.Fit,\n    // 'fit' will fit the items in the container without scroll;\n    // 'scrollVertical' will fit on width and height of the items will be the same as the width\n    // 'scrollHorizontal' will fit on height and width of the items will be the same as the height\n    // 'fixed' will set the rows and columns dimensions based on fixedColWidth and fixedRowHeight options\n    // 'verticalFixed' will set the rows to fixedRowHeight and columns width will fit the space available\n    // 'horizontalFixed' will set the columns to fixedColWidth and rows height will fit the space available\n    fixedColWidth: 250,\n    // fixed col width for gridType: 'fixed'\n    fixedRowHeight: 250,\n    // fixed row height for gridType: 'fixed'\n    keepFixedHeightInMobile: false,\n    // keep the height from fixed gridType in mobile layout\n    keepFixedWidthInMobile: false,\n    // keep the width from fixed gridType in mobile layout\n    setGridSize: false,\n    // sets grid size depending on content\n    compactType: CompactType.None,\n    // compact items: 'none' | 'compactUp' | 'compactLeft' | 'compactUp&Left' | 'compactLeft&Up'\n    mobileBreakpoint: 640,\n    // if the screen is not wider that this, remove the grid layout and stack the items\n    minCols: 1,\n    // minimum amount of columns in the grid\n    maxCols: 100,\n    // maximum amount of columns in the grid\n    minRows: 1,\n    // minimum amount of rows in the grid\n    maxRows: 100,\n    // maximum amount of rows in the grid\n    defaultItemCols: 1,\n    // default width of an item in columns\n    defaultItemRows: 1,\n    // default height of an item in rows\n    maxItemCols: 50,\n    // max item number of cols\n    maxItemRows: 50,\n    // max item number of rows\n    minItemCols: 1,\n    // min item number of columns\n    minItemRows: 1,\n    // min item number of rows\n    minItemArea: 1,\n    // min item area: cols * rows\n    maxItemArea: 2500,\n    // max item area: cols * rows\n    margin: 10,\n    // margin between grid items\n    outerMargin: true,\n    // if margins will apply to the sides of the container\n    outerMarginTop: null,\n    // override outer margin for grid\n    outerMarginRight: null,\n    // override outer margin for grid\n    outerMarginBottom: null,\n    // override outer margin for grid\n    outerMarginLeft: null,\n    // override outer margin for grid\n    useTransformPositioning: true,\n    // toggle between transform or top/left positioning of items\n    scrollSensitivity: 10,\n    // margin of the dashboard where to start scrolling\n    scrollSpeed: 20,\n    // how much to scroll each mouse move when in the scrollSensitivity zone\n    initCallback: undefined,\n    // callback to call after grid has initialized. Arguments: gridsterComponent\n    destroyCallback: undefined,\n    // callback to call after grid has destroyed. Arguments: gridsterComponent\n    gridSizeChangedCallback: undefined,\n    // callback to call after grid has changed size. Arguments: gridsterComponent\n    itemChangeCallback: undefined,\n    // callback to call for each item when is changes x, y, rows, cols.\n    // Arguments: gridsterItem, gridsterItemComponent\n    itemResizeCallback: undefined,\n    // callback to call for each item when width/height changes.\n    // Arguments: gridsterItem, gridsterItemComponent\n    itemInitCallback: undefined,\n    // callback to call for each item when is initialized.\n    // Arguments: gridsterItem, gridsterItemComponent\n    itemRemovedCallback: undefined,\n    // callback to call for each item when is initialized.\n    // Arguments: gridsterItem, gridsterItemComponent\n    itemValidateCallback: undefined,\n    // callback to call to validate item position/size. Return true if valid.\n    // Arguments: gridsterItem\n    enableEmptyCellClick: false,\n    // enable empty cell click events\n    enableEmptyCellContextMenu: false,\n    // enable empty cell context menu (right click) events\n    enableEmptyCellDrop: false,\n    // enable empty cell drop events\n    enableEmptyCellDrag: false,\n    // enable empty cell drag events\n    enableOccupiedCellDrop: false,\n    // enable occupied cell drop events\n    emptyCellClickCallback: undefined,\n    // empty cell click callback\n    emptyCellContextMenuCallback: undefined,\n    // empty cell context menu (right click) callback\n    emptyCellDropCallback: undefined,\n    // empty cell drag drop callback. HTML5 Drag & Drop\n    emptyCellDragCallback: undefined,\n    // empty cell drag and create item like excel cell selection\n    emptyCellDragMaxCols: 50,\n    // limit empty cell drag max cols\n    emptyCellDragMaxRows: 50,\n    // limit empty cell drag max rows\n    // Arguments: event, gridsterItem{x, y, rows: defaultItemRows, cols: defaultItemCols}\n    ignoreMarginInRow: false,\n    // ignore the gap between rows for items which span multiple rows (see #162, #224)\n    draggable: {\n        delayStart: 0,\n        // milliseconds to delay the start of drag, useful for touch interaction\n        enabled: false,\n        // enable/disable draggable items\n        ignoreContentClass: 'gridster-item-content',\n        // default content class to ignore the drag event from\n        ignoreContent: false,\n        // if true drag will start only from elements from `dragHandleClass`\n        dragHandleClass: 'drag-handler',\n        // drag event only from this class. If `ignoreContent` is true.\n        stop: undefined,\n        // callback when dragging an item stops.  Accepts Promise return to cancel/approve drag.\n        start: undefined,\n        // callback when dragging an item starts.\n        // Arguments: item, gridsterItem, event\n        dropOverItems: false,\n        // enable drop items on top other item\n        dropOverItemsCallback: undefined // callback on drop over another item\n        // Arguments: source, target, gridComponent\n    },\n    resizable: {\n        delayStart: 0,\n        // milliseconds to delay the start of resize, useful for touch interaction\n        enabled: false,\n        // enable/disable resizable items\n        handles: {\n            s: true,\n            e: true,\n            n: true,\n            w: true,\n            se: true,\n            ne: true,\n            sw: true,\n            nw: true\n        },\n        // resizable edges of an item\n        stop: undefined,\n        // callback when resizing an item stops. Accepts Promise return to cancel/approve resize.\n        start: undefined // callback when resizing an item starts.\n        // Arguments: item, gridsterItem, event\n    },\n    swap: true,\n    // allow items to switch position if drop on top of another\n    swapWhileDragging: false,\n    // allow items to switch position while dragging\n    pushItems: false,\n    // push items when resizing and dragging\n    disablePushOnDrag: false,\n    // disable push on drag\n    disablePushOnResize: false,\n    // disable push on resize\n    pushDirections: { north: true, east: true, south: true, west: true },\n    // control the directions items are pushed\n    pushResizeItems: false,\n    // on resize of item will shrink adjacent items\n    displayGrid: DisplayGrid.OnDragAndResize,\n    // display background grid of rows and columns\n    disableWindowResize: false,\n    // disable the window on resize listener. This will stop grid to recalculate on window resize.\n    disableWarnings: false,\n    // disable console log warnings about misplacement of grid items\n    scrollToNewItems: false,\n    // scroll to new items placed in a scrollable view\n    disableScrollHorizontal: false,\n    // disable horizontal scrolling\n    disableScrollVertical: false,\n    // disable vertical scrolling\n    disableAutoPositionOnConflict: false // disable auto-position of items on conflict state\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass GridsterUtils {\n    /**\n     * @param {?} obj1\n     * @param {?} obj2\n     * @param {?} properties\n     * @return {?}\n     */\n    static merge(obj1, obj2, properties) {\n        for (const p in obj2) {\n            if (obj2[p] !== void 0 && properties.hasOwnProperty(p)) {\n                if (typeof obj2[p] === 'object') {\n                    obj1[p] = GridsterUtils.merge(obj1[p], obj2[p], properties[p]);\n                }\n                else {\n                    obj1[p] = obj2[p];\n                }\n            }\n        }\n        return obj1;\n    }\n    /**\n     * @param {?} func\n     * @param {?} wait\n     * @return {?}\n     */\n    static debounce(func, wait) {\n        /** @type {?} */\n        let timeout;\n        return (/**\n         * @return {?}\n         */\n        function () {\n            /** @type {?} */\n            const context = this;\n            /** @type {?} */\n            const args = arguments;\n            /** @type {?} */\n            const later = (/**\n             * @return {?}\n             */\n            function () {\n                timeout = null;\n                func.apply(context, args);\n            });\n            clearTimeout(timeout);\n            timeout = setTimeout(later, wait);\n        });\n    }\n    /**\n     * @param {?} e\n     * @return {?}\n     */\n    static checkTouchEvent(e) {\n        if (e.clientX === undefined && e.touches) {\n            if (e.touches && e.touches.length) {\n                e.clientX = e.touches[0].clientX;\n                e.clientY = e.touches[0].clientY;\n            }\n            else if (e.changedTouches && e.changedTouches.length) {\n                e.clientX = e.changedTouches[0].clientX;\n                e.clientY = e.changedTouches[0].clientY;\n            }\n        }\n    }\n    /**\n     * @param {?} gridster\n     * @param {?} e\n     * @return {?}\n     */\n    static checkContentClassForEvent(gridster, e) {\n        if (gridster.$options.draggable.ignoreContent) {\n            if (!GridsterUtils.checkContentClass(e.target, e.currentTarget, gridster.$options.draggable.dragHandleClass)) {\n                return true;\n            }\n        }\n        else {\n            if (GridsterUtils.checkContentClass(e.target, e.currentTarget, gridster.$options.draggable.ignoreContentClass)) {\n                return true;\n            }\n        }\n        return false;\n    }\n    /**\n     * @param {?} gridster\n     * @param {?} e\n     * @return {?}\n     */\n    static checkContentClassForEmptyCellClickEvent(gridster, e) {\n        return GridsterUtils.checkContentClass(e.target, e.currentTarget, gridster.$options.draggable.ignoreContentClass)\n            || GridsterUtils.checkContentClass(e.target, e.currentTarget, gridster.$options.draggable.dragHandleClass);\n    }\n    /**\n     * @param {?} target\n     * @param {?} current\n     * @param {?} contentClass\n     * @return {?}\n     */\n    static checkContentClass(target, current, contentClass) {\n        if (!target || target === current) {\n            return false;\n        }\n        if (target.hasAttribute('class') && target.getAttribute('class').split(' ').indexOf(contentClass) > -1) {\n            return true;\n        }\n        else {\n            return GridsterUtils.checkContentClass(target.parentNode, current, contentClass);\n        }\n    }\n    /**\n     * @param {?} a\n     * @param {?} b\n     * @return {?}\n     */\n    static compareItems(a, b) {\n        if (a.y > b.y) {\n            return -1;\n        }\n        else if (a.y < b.y) {\n            return 1;\n        }\n        else if (a.x > b.x) {\n            return -1;\n        }\n        else {\n            return 1;\n        }\n    }\n}\nGridsterUtils.decorators = [\n    { type: Injectable }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @abstract\n */\nclass GridsterComponentInterface {\n}\nif (false) {\n    /** @type {?} */\n    GridsterComponentInterface.prototype.$options;\n    /** @type {?} */\n    GridsterComponentInterface.prototype.grid;\n    /** @type {?} */\n    GridsterComponentInterface.prototype.checkCollision;\n    /** @type {?} */\n    GridsterComponentInterface.prototype.checkCollisionForSwaping;\n    /** @type {?} */\n    GridsterComponentInterface.prototype.positionXToPixels;\n    /** @type {?} */\n    GridsterComponentInterface.prototype.pixelsToPositionX;\n    /** @type {?} */\n    GridsterComponentInterface.prototype.positionYToPixels;\n    /** @type {?} */\n    GridsterComponentInterface.prototype.pixelsToPositionY;\n    /** @type {?} */\n    GridsterComponentInterface.prototype.findItemWithItem;\n    /** @type {?} */\n    GridsterComponentInterface.prototype.findItemsWithItem;\n    /** @type {?} */\n    GridsterComponentInterface.prototype.checkGridCollision;\n    /** @type {?} */\n    GridsterComponentInterface.prototype.el;\n    /** @type {?} */\n    GridsterComponentInterface.prototype.renderer;\n    /** @type {?} */\n    GridsterComponentInterface.prototype.gridRenderer;\n    /** @type {?} */\n    GridsterComponentInterface.prototype.cdRef;\n    /** @type {?} */\n    GridsterComponentInterface.prototype.options;\n    /** @type {?} */\n    GridsterComponentInterface.prototype.calculateLayoutDebounce;\n    /** @type {?} */\n    GridsterComponentInterface.prototype.updateGrid;\n    /** @type {?} */\n    GridsterComponentInterface.prototype.movingItem;\n    /** @type {?} */\n    GridsterComponentInterface.prototype.addItem;\n    /** @type {?} */\n    GridsterComponentInterface.prototype.removeItem;\n    /** @type {?} */\n    GridsterComponentInterface.prototype.previewStyle;\n    /** @type {?} */\n    GridsterComponentInterface.prototype.mobile;\n    /** @type {?} */\n    GridsterComponentInterface.prototype.curWidth;\n    /** @type {?} */\n    GridsterComponentInterface.prototype.curHeight;\n    /** @type {?} */\n    GridsterComponentInterface.prototype.columns;\n    /** @type {?} */\n    GridsterComponentInterface.prototype.rows;\n    /** @type {?} */\n    GridsterComponentInterface.prototype.curColWidth;\n    /** @type {?} */\n    GridsterComponentInterface.prototype.curRowHeight;\n    /** @type {?} */\n    GridsterComponentInterface.prototype.windowResize;\n    /** @type {?} */\n    GridsterComponentInterface.prototype.setGridDimensions;\n    /** @type {?} */\n    GridsterComponentInterface.prototype.dragInProgress;\n    /** @type {?} */\n    GridsterComponentInterface.prototype.emptyCell;\n    /** @type {?} */\n    GridsterComponentInterface.prototype.compact;\n    /** @type {?} */\n    GridsterComponentInterface.prototype.zone;\n    /** @type {?} */\n    GridsterComponentInterface.prototype.gridRows;\n    /** @type {?} */\n    GridsterComponentInterface.prototype.gridColumns;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass GridsterEmptyCell {\n    /**\n     * @param {?} gridster\n     */\n    constructor(gridster) {\n        this.gridster = gridster;\n    }\n    /**\n     * @return {?}\n     */\n    destroy() {\n        delete this.initialItem;\n        delete this.gridster.movingItem;\n        if (this.gridster.previewStyle) {\n            this.gridster.previewStyle();\n        }\n        delete this.gridster;\n        if (this.emptyCellExit) {\n            this.emptyCellExit();\n            this.emptyCellExit = null;\n        }\n    }\n    /**\n     * @return {?}\n     */\n    updateOptions() {\n        if (this.gridster.$options.enableEmptyCellClick && !this.emptyCellClick && this.gridster.options.emptyCellClickCallback) {\n            this.emptyCellClick = this.gridster.renderer.listen(this.gridster.el, 'click', this.emptyCellClickCb.bind(this));\n            this.emptyCellClickTouch = this.gridster.renderer.listen(this.gridster.el, 'touchend', this.emptyCellClickCb.bind(this));\n        }\n        else if (!this.gridster.$options.enableEmptyCellClick && this.emptyCellClick && this.emptyCellClickTouch) {\n            this.emptyCellClick();\n            this.emptyCellClickTouch();\n            this.emptyCellClick = null;\n            this.emptyCellClickTouch = null;\n        }\n        if (this.gridster.$options.enableEmptyCellContextMenu && !this.emptyCellContextMenu &&\n            this.gridster.options.emptyCellContextMenuCallback) {\n            this.emptyCellContextMenu = this.gridster.renderer.listen(this.gridster.el, 'contextmenu', this.emptyCellContextMenuCb.bind(this));\n        }\n        else if (!this.gridster.$options.enableEmptyCellContextMenu && this.emptyCellContextMenu) {\n            this.emptyCellContextMenu();\n            this.emptyCellContextMenu = null;\n        }\n        if (this.gridster.$options.enableEmptyCellDrop && !this.emptyCellDrop && this.gridster.options.emptyCellDropCallback) {\n            this.emptyCellDrop = this.gridster.renderer.listen(this.gridster.el, 'drop', this.emptyCellDragDrop.bind(this));\n            this.gridster.zone.runOutsideAngular((/**\n             * @return {?}\n             */\n            () => {\n                this.emptyCellMove = this.gridster.renderer.listen(this.gridster.el, 'dragover', this.emptyCellDragOver.bind(this));\n            }));\n            this.emptyCellExit = this.gridster.renderer.listen('document', 'dragend', (/**\n             * @return {?}\n             */\n            () => {\n                this.gridster.movingItem = null;\n                this.gridster.previewStyle();\n            }));\n        }\n        else if (!this.gridster.$options.enableEmptyCellDrop && this.emptyCellDrop && this.emptyCellMove && this.emptyCellExit) {\n            this.emptyCellDrop();\n            this.emptyCellMove();\n            this.emptyCellExit();\n            this.emptyCellMove = null;\n            this.emptyCellDrop = null;\n            this.emptyCellExit = null;\n        }\n        if (this.gridster.$options.enableEmptyCellDrag && !this.emptyCellDrag && this.gridster.options.emptyCellDragCallback) {\n            this.emptyCellDrag = this.gridster.renderer.listen(this.gridster.el, 'mousedown', this.emptyCellMouseDown.bind(this));\n            this.emptyCellDragTouch = this.gridster.renderer.listen(this.gridster.el, 'touchstart', this.emptyCellMouseDown.bind(this));\n        }\n        else if (!this.gridster.$options.enableEmptyCellDrag && this.emptyCellDrag && this.emptyCellDragTouch) {\n            this.emptyCellDrag();\n            this.emptyCellDragTouch();\n            this.emptyCellDrag = null;\n            this.emptyCellDragTouch = null;\n        }\n    }\n    /**\n     * @param {?} e\n     * @return {?}\n     */\n    emptyCellClickCb(e) {\n        if (this.gridster.movingItem || GridsterUtils.checkContentClassForEmptyCellClickEvent(this.gridster, e)) {\n            return;\n        }\n        /** @type {?} */\n        const item = this.getValidItemFromEvent(e);\n        if (!item) {\n            return;\n        }\n        if (this.gridster.options.emptyCellClickCallback) {\n            this.gridster.options.emptyCellClickCallback(e, item);\n        }\n        this.gridster.cdRef.markForCheck();\n    }\n    /**\n     * @param {?} e\n     * @return {?}\n     */\n    emptyCellContextMenuCb(e) {\n        if (this.gridster.movingItem || GridsterUtils.checkContentClassForEmptyCellClickEvent(this.gridster, e)) {\n            return;\n        }\n        e.preventDefault();\n        e.stopPropagation();\n        /** @type {?} */\n        const item = this.getValidItemFromEvent(e);\n        if (!item) {\n            return;\n        }\n        if (this.gridster.options.emptyCellContextMenuCallback) {\n            this.gridster.options.emptyCellContextMenuCallback(e, item);\n        }\n        this.gridster.cdRef.markForCheck();\n    }\n    /**\n     * @param {?} e\n     * @return {?}\n     */\n    emptyCellDragDrop(e) {\n        /** @type {?} */\n        const item = this.getValidItemFromEvent(e);\n        if (!item) {\n            return;\n        }\n        if (this.gridster.options.emptyCellDropCallback) {\n            this.gridster.options.emptyCellDropCallback(e, item);\n        }\n        this.gridster.cdRef.markForCheck();\n    }\n    /**\n     * @param {?} e\n     * @return {?}\n     */\n    emptyCellDragOver(e) {\n        e.preventDefault();\n        e.stopPropagation();\n        /** @type {?} */\n        const item = this.getValidItemFromEvent(e);\n        if (item) {\n            e.dataTransfer.dropEffect = 'move';\n            this.gridster.movingItem = item;\n        }\n        else {\n            e.dataTransfer.dropEffect = 'none';\n            this.gridster.movingItem = null;\n        }\n        this.gridster.previewStyle();\n    }\n    /**\n     * @param {?} e\n     * @return {?}\n     */\n    emptyCellMouseDown(e) {\n        if (GridsterUtils.checkContentClassForEmptyCellClickEvent(this.gridster, e)) {\n            return;\n        }\n        e.preventDefault();\n        e.stopPropagation();\n        /** @type {?} */\n        const item = this.getValidItemFromEvent(e);\n        /** @type {?} */\n        const leftMouseButtonCode = 1;\n        if (!item || e.buttons !== leftMouseButtonCode) {\n            return;\n        }\n        this.initialItem = item;\n        this.gridster.movingItem = item;\n        this.gridster.previewStyle();\n        this.gridster.zone.runOutsideAngular((/**\n         * @return {?}\n         */\n        () => {\n            this.emptyCellMMove = this.gridster.renderer.listen('window', 'mousemove', this.emptyCellMouseMove.bind(this));\n            this.emptyCellMMoveTouch = this.gridster.renderer.listen('window', 'touchmove', this.emptyCellMouseMove.bind(this));\n        }));\n        this.emptyCellUp = this.gridster.renderer.listen('window', 'mouseup', this.emptyCellMouseUp.bind(this));\n        this.emptyCellUpTouch = this.gridster.renderer.listen('window', 'touchend', this.emptyCellMouseUp.bind(this));\n    }\n    /**\n     * @param {?} e\n     * @return {?}\n     */\n    emptyCellMouseMove(e) {\n        e.preventDefault();\n        e.stopPropagation();\n        /** @type {?} */\n        const item = this.getValidItemFromEvent(e, this.initialItem);\n        if (!item) {\n            return;\n        }\n        this.gridster.movingItem = item;\n        this.gridster.previewStyle();\n    }\n    /**\n     * @param {?} e\n     * @return {?}\n     */\n    emptyCellMouseUp(e) {\n        this.emptyCellMMove();\n        this.emptyCellMMoveTouch();\n        this.emptyCellUp();\n        this.emptyCellUpTouch();\n        /** @type {?} */\n        const item = this.getValidItemFromEvent(e, this.initialItem);\n        if (item) {\n            this.gridster.movingItem = item;\n        }\n        if (this.gridster.options.emptyCellDragCallback && this.gridster.movingItem) {\n            this.gridster.options.emptyCellDragCallback(e, this.gridster.movingItem);\n        }\n        setTimeout((/**\n         * @return {?}\n         */\n        () => {\n            this.initialItem = null;\n            if (this.gridster) {\n                this.gridster.movingItem = null;\n                this.gridster.previewStyle();\n            }\n        }));\n        this.gridster.cdRef.markForCheck();\n    }\n    /**\n     * @param {?} e\n     * @param {?=} oldItem\n     * @return {?}\n     */\n    getValidItemFromEvent(e, oldItem) {\n        e.preventDefault();\n        e.stopPropagation();\n        GridsterUtils.checkTouchEvent(e);\n        /** @type {?} */\n        const rect = this.gridster.el.getBoundingClientRect();\n        /** @type {?} */\n        const x = e.clientX + this.gridster.el.scrollLeft - rect.left - this.gridster.$options.margin;\n        /** @type {?} */\n        const y = e.clientY + this.gridster.el.scrollTop - rect.top - this.gridster.$options.margin;\n        /** @type {?} */\n        const item = {\n            x: this.gridster.pixelsToPositionX(x, Math.floor, true),\n            y: this.gridster.pixelsToPositionY(y, Math.floor, true),\n            cols: this.gridster.$options.defaultItemCols,\n            rows: this.gridster.$options.defaultItemRows\n        };\n        if (oldItem) {\n            item.cols = Math.min(Math.abs(oldItem.x - item.x) + 1, this.gridster.$options.emptyCellDragMaxCols);\n            item.rows = Math.min(Math.abs(oldItem.y - item.y) + 1, this.gridster.$options.emptyCellDragMaxRows);\n            if (oldItem.x < item.x) {\n                item.x = oldItem.x;\n            }\n            else if (oldItem.x - item.x > this.gridster.$options.emptyCellDragMaxCols - 1) {\n                item.x = this.gridster.movingItem ? this.gridster.movingItem.x : 0;\n            }\n            if (oldItem.y < item.y) {\n                item.y = oldItem.y;\n            }\n            else if (oldItem.y - item.y > this.gridster.$options.emptyCellDragMaxRows - 1) {\n                item.y = this.gridster.movingItem ? this.gridster.movingItem.y : 0;\n            }\n        }\n        if (!this.gridster.$options.enableOccupiedCellDrop && this.gridster.checkCollision(item)) {\n            return;\n        }\n        return item;\n    }\n}\nGridsterEmptyCell.decorators = [\n    { type: Injectable }\n];\n/** @nocollapse */\nGridsterEmptyCell.ctorParameters = () => [\n    { type: GridsterComponentInterface }\n];\nif (false) {\n    /** @type {?} */\n    GridsterEmptyCell.prototype.initialItem;\n    /** @type {?} */\n    GridsterEmptyCell.prototype.emptyCellClick;\n    /** @type {?} */\n    GridsterEmptyCell.prototype.emptyCellClickTouch;\n    /** @type {?} */\n    GridsterEmptyCell.prototype.emptyCellContextMenu;\n    /** @type {?} */\n    GridsterEmptyCell.prototype.emptyCellDrop;\n    /** @type {?} */\n    GridsterEmptyCell.prototype.emptyCellDrag;\n    /** @type {?} */\n    GridsterEmptyCell.prototype.emptyCellDragTouch;\n    /** @type {?} */\n    GridsterEmptyCell.prototype.emptyCellMMove;\n    /** @type {?} */\n    GridsterEmptyCell.prototype.emptyCellMMoveTouch;\n    /** @type {?} */\n    GridsterEmptyCell.prototype.emptyCellUp;\n    /** @type {?} */\n    GridsterEmptyCell.prototype.emptyCellUpTouch;\n    /** @type {?} */\n    GridsterEmptyCell.prototype.emptyCellMove;\n    /** @type {?} */\n    GridsterEmptyCell.prototype.emptyCellExit;\n    /**\n     * @type {?}\n     * @private\n     */\n    GridsterEmptyCell.prototype.gridster;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass GridsterCompact {\n    /**\n     * @param {?} gridster\n     */\n    constructor(gridster) {\n        this.gridster = gridster;\n    }\n    /**\n     * @return {?}\n     */\n    destroy() {\n        delete this.gridster;\n    }\n    /**\n     * @return {?}\n     */\n    checkCompact() {\n        if (this.gridster.$options.compactType !== CompactType.None) {\n            if (this.gridster.$options.compactType === CompactType.CompactUp) {\n                this.checkCompactUp();\n            }\n            else if (this.gridster.$options.compactType === CompactType.CompactLeft) {\n                this.checkCompactLeft();\n            }\n            else if (this.gridster.$options.compactType === CompactType.CompactUpAndLeft) {\n                this.checkCompactUp();\n                this.checkCompactLeft();\n            }\n            else if (this.gridster.$options.compactType === CompactType.CompactLeftAndUp) {\n                this.checkCompactLeft();\n                this.checkCompactUp();\n            }\n            else if (this.gridster.$options.compactType === CompactType.CompactRight) {\n                this.checkCompactRight();\n            }\n            else if (this.gridster.$options.compactType === CompactType.CompactUpAndRight) {\n                this.checkCompactUp();\n                this.checkCompactRight();\n            }\n            else if (this.gridster.$options.compactType === CompactType.CompactRightAndUp) {\n                this.checkCompactRight();\n                this.checkCompactUp();\n            }\n        }\n    }\n    /**\n     * @param {?} item\n     * @return {?}\n     */\n    checkCompactItem(item) {\n        if (this.gridster.$options.compactType !== CompactType.None) {\n            if (this.gridster.$options.compactType === CompactType.CompactUp) {\n                this.moveUpTillCollision(item);\n            }\n            else if (this.gridster.$options.compactType === CompactType.CompactLeft) {\n                this.moveLeftTillCollision(item);\n            }\n            else if (this.gridster.$options.compactType === CompactType.CompactUpAndLeft) {\n                this.moveUpTillCollision(item);\n                this.moveLeftTillCollision(item);\n            }\n            else if (this.gridster.$options.compactType === CompactType.CompactLeftAndUp) {\n                this.moveLeftTillCollision(item);\n                this.moveUpTillCollision(item);\n            }\n            else if (this.gridster.$options.compactType === CompactType.CompactUpAndRight) {\n                this.moveUpTillCollision(item);\n                this.moveRightTillCollision(item);\n            }\n        }\n    }\n    /**\n     * @return {?}\n     */\n    checkCompactUp() {\n        /** @type {?} */\n        let widgetMovedUp = false;\n        /** @type {?} */\n        let widget;\n        /** @type {?} */\n        let moved;\n        /** @type {?} */\n        const l = this.gridster.grid.length;\n        for (let i = 0; i < l; i++) {\n            widget = this.gridster.grid[i];\n            if (widget.$item.compactEnabled === false) {\n                continue;\n            }\n            moved = this.moveUpTillCollision(widget.$item);\n            if (moved) {\n                widgetMovedUp = true;\n                widget.item.y = widget.$item.y;\n                widget.itemChanged();\n            }\n        }\n        if (widgetMovedUp) {\n            this.checkCompact();\n        }\n    }\n    /**\n     * @param {?} item\n     * @return {?}\n     */\n    moveUpTillCollision(item) {\n        item.y -= 1;\n        if (this.gridster.checkCollision(item)) {\n            item.y += 1;\n            return false;\n        }\n        else {\n            this.moveUpTillCollision(item);\n            return true;\n        }\n    }\n    /**\n     * @return {?}\n     */\n    checkCompactLeft() {\n        /** @type {?} */\n        let widgetMovedUp = false;\n        /** @type {?} */\n        let widget;\n        /** @type {?} */\n        let moved;\n        /** @type {?} */\n        const l = this.gridster.grid.length;\n        for (let i = 0; i < l; i++) {\n            widget = this.gridster.grid[i];\n            if (widget.$item.compactEnabled === false) {\n                continue;\n            }\n            moved = this.moveLeftTillCollision(widget.$item);\n            if (moved) {\n                widgetMovedUp = true;\n                widget.item.x = widget.$item.x;\n                widget.itemChanged();\n            }\n        }\n        if (widgetMovedUp) {\n            this.checkCompact();\n        }\n    }\n    /**\n     * @return {?}\n     */\n    checkCompactRight() {\n        /** @type {?} */\n        let widgetMovedUp = false;\n        /** @type {?} */\n        let widget;\n        /** @type {?} */\n        let moved;\n        /** @type {?} */\n        const l = this.gridster.grid.length;\n        for (let i = 0; i < l; i++) {\n            widget = this.gridster.grid[i];\n            if (widget.$item.compactEnabled === false) {\n                continue;\n            }\n            moved = this.moveRightTillCollision(widget.$item);\n            if (moved) {\n                widgetMovedUp = true;\n                widget.item.x = widget.$item.x;\n                widget.itemChanged();\n            }\n        }\n        if (widgetMovedUp) {\n            this.checkCompact();\n        }\n    }\n    /**\n     * @param {?} item\n     * @return {?}\n     */\n    moveLeftTillCollision(item) {\n        item.x -= 1;\n        if (this.gridster.checkCollision(item)) {\n            item.x += 1;\n            return false;\n        }\n        else {\n            this.moveLeftTillCollision(item);\n            return true;\n        }\n    }\n    /**\n     * @param {?} item\n     * @return {?}\n     */\n    moveRightTillCollision(item) {\n        item.x += 1;\n        if (this.gridster.checkCollision(item)) {\n            item.x -= 1;\n            return false;\n        }\n        else {\n            this.moveRightTillCollision(item);\n            return true;\n        }\n    }\n}\nGridsterCompact.decorators = [\n    { type: Injectable }\n];\n/** @nocollapse */\nGridsterCompact.ctorParameters = () => [\n    { type: GridsterComponentInterface }\n];\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    GridsterCompact.prototype.gridster;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass GridsterRenderer {\n    /**\n     * @param {?} gridster\n     */\n    constructor(gridster) {\n        this.gridster = gridster;\n    }\n    /**\n     * @return {?}\n     */\n    destroy() {\n        delete this.gridster;\n    }\n    /**\n     * @param {?} el\n     * @param {?} item\n     * @param {?} renderer\n     * @return {?}\n     */\n    updateItem(el, item, renderer) {\n        if (this.gridster.mobile) {\n            this.clearCellPosition(renderer, el);\n            if (this.gridster.$options.keepFixedHeightInMobile) {\n                renderer.setStyle(el, 'height', (item.rows * this.gridster.$options.fixedRowHeight) + 'px');\n            }\n            else {\n                renderer.setStyle(el, 'height', (item.rows * this.gridster.curWidth / item.cols) + 'px');\n            }\n            if (this.gridster.$options.keepFixedWidthInMobile) {\n                renderer.setStyle(el, 'width', this.gridster.$options.fixedColWidth + 'px');\n            }\n            else {\n                renderer.setStyle(el, 'width', '');\n            }\n            renderer.setStyle(el, 'margin-bottom', this.gridster.$options.margin + 'px');\n            renderer.setStyle(el, 'margin-right', '');\n        }\n        else {\n            /** @type {?} */\n            const x = Math.round(this.gridster.curColWidth * item.x);\n            /** @type {?} */\n            const y = Math.round(this.gridster.curRowHeight * item.y);\n            /** @type {?} */\n            const width = this.gridster.curColWidth * item.cols - this.gridster.$options.margin;\n            /** @type {?} */\n            const height = (this.gridster.curRowHeight * item.rows - this.gridster.$options.margin);\n            // set the cell style\n            this.setCellPosition(renderer, el, x, y);\n            renderer.setStyle(el, 'width', width + 'px');\n            renderer.setStyle(el, 'height', height + 'px');\n            /** @type {?} */\n            let marginBottom = null;\n            /** @type {?} */\n            let marginRight = null;\n            if (this.gridster.$options.outerMargin) {\n                if (this.gridster.rows === item.rows + item.y) {\n                    if (this.gridster.$options.outerMarginBottom !== null) {\n                        marginBottom = this.gridster.$options.outerMarginBottom + 'px';\n                    }\n                    else {\n                        marginBottom = this.gridster.$options.margin + 'px';\n                    }\n                }\n                if (this.gridster.columns === item.cols + item.x) {\n                    if (this.gridster.$options.outerMarginBottom !== null) {\n                        marginRight = this.gridster.$options.outerMarginRight + 'px';\n                    }\n                    else {\n                        marginRight = this.gridster.$options.margin + 'px';\n                    }\n                }\n            }\n            renderer.setStyle(el, 'margin-bottom', marginBottom);\n            renderer.setStyle(el, 'margin-right', marginRight);\n        }\n    }\n    /**\n     * @return {?}\n     */\n    updateGridster() {\n        /** @type {?} */\n        let addClass = '';\n        /** @type {?} */\n        let removeClass1 = '';\n        /** @type {?} */\n        let removeClass2 = '';\n        /** @type {?} */\n        let removeClass3 = '';\n        if (this.gridster.$options.gridType === GridType.Fit) {\n            addClass = GridType.Fit;\n            removeClass1 = GridType.ScrollVertical;\n            removeClass2 = GridType.ScrollHorizontal;\n            removeClass3 = GridType.Fixed;\n        }\n        else if (this.gridster.$options.gridType === GridType.ScrollVertical) {\n            this.gridster.curRowHeight = this.gridster.curColWidth;\n            addClass = GridType.ScrollVertical;\n            removeClass1 = GridType.Fit;\n            removeClass2 = GridType.ScrollHorizontal;\n            removeClass3 = GridType.Fixed;\n        }\n        else if (this.gridster.$options.gridType === GridType.ScrollHorizontal) {\n            this.gridster.curColWidth = this.gridster.curRowHeight;\n            addClass = GridType.ScrollHorizontal;\n            removeClass1 = GridType.Fit;\n            removeClass2 = GridType.ScrollVertical;\n            removeClass3 = GridType.Fixed;\n        }\n        else if (this.gridster.$options.gridType === GridType.Fixed) {\n            this.gridster.curColWidth = this.gridster.$options.fixedColWidth +\n                (this.gridster.$options.ignoreMarginInRow ? 0 : this.gridster.$options.margin);\n            this.gridster.curRowHeight = this.gridster.$options.fixedRowHeight +\n                (this.gridster.$options.ignoreMarginInRow ? 0 : this.gridster.$options.margin);\n            addClass = GridType.Fixed;\n            removeClass1 = GridType.Fit;\n            removeClass2 = GridType.ScrollVertical;\n            removeClass3 = GridType.ScrollHorizontal;\n        }\n        else if (this.gridster.$options.gridType === GridType.VerticalFixed) {\n            this.gridster.curRowHeight = this.gridster.$options.fixedRowHeight +\n                (this.gridster.$options.ignoreMarginInRow ? 0 : this.gridster.$options.margin);\n            addClass = GridType.ScrollVertical;\n            removeClass1 = GridType.Fit;\n            removeClass2 = GridType.ScrollHorizontal;\n            removeClass3 = GridType.Fixed;\n        }\n        else if (this.gridster.$options.gridType === GridType.HorizontalFixed) {\n            this.gridster.curColWidth = this.gridster.$options.fixedColWidth +\n                (this.gridster.$options.ignoreMarginInRow ? 0 : this.gridster.$options.margin);\n            addClass = GridType.ScrollHorizontal;\n            removeClass1 = GridType.Fit;\n            removeClass2 = GridType.ScrollVertical;\n            removeClass3 = GridType.Fixed;\n        }\n        if (this.gridster.mobile) {\n            this.gridster.renderer.removeClass(this.gridster.el, addClass);\n        }\n        else {\n            this.gridster.renderer.addClass(this.gridster.el, addClass);\n        }\n        this.gridster.renderer.removeClass(this.gridster.el, removeClass1);\n        this.gridster.renderer.removeClass(this.gridster.el, removeClass2);\n        this.gridster.renderer.removeClass(this.gridster.el, removeClass3);\n    }\n    /**\n     * @param {?} i\n     * @return {?}\n     */\n    getGridColumnStyle(i) {\n        return Object.assign({}, this.getLeftPosition(this.gridster.curColWidth * i), { width: this.gridster.curColWidth - this.gridster.$options.margin + 'px', height: this.gridster.gridRows.length * this.gridster.curRowHeight - this.gridster.$options.margin + 'px' });\n    }\n    /**\n     * @param {?} i\n     * @return {?}\n     */\n    getGridRowStyle(i) {\n        return Object.assign({}, this.getTopPosition(this.gridster.curRowHeight * i), { width: this.gridster.gridColumns.length * this.gridster.curColWidth - this.gridster.$options.margin + 'px', height: this.gridster.curRowHeight - this.gridster.$options.margin + 'px' });\n    }\n    /**\n     * @param {?} d\n     * @return {?}\n     */\n    getLeftPosition(d) {\n        if (this.gridster.$options.useTransformPositioning) {\n            return {\n                transform: 'translateX(' + d + 'px)',\n            };\n        }\n        else {\n            return {\n                left: (this.getLeftMargin() + d) + 'px'\n            };\n        }\n    }\n    /**\n     * @param {?} d\n     * @return {?}\n     */\n    getTopPosition(d) {\n        if (this.gridster.$options.useTransformPositioning) {\n            return {\n                transform: 'translateY(' + d + 'px)',\n            };\n        }\n        else {\n            return {\n                top: this.getTopMargin() + d + 'px'\n            };\n        }\n    }\n    /**\n     * @param {?} renderer\n     * @param {?} el\n     * @return {?}\n     */\n    clearCellPosition(renderer, el) {\n        if (this.gridster.$options.useTransformPositioning) {\n            renderer.setStyle(el, 'transform', '');\n        }\n        else {\n            renderer.setStyle(el, 'top', '');\n            renderer.setStyle(el, 'left', '');\n        }\n    }\n    /**\n     * @param {?} renderer\n     * @param {?} el\n     * @param {?} x\n     * @param {?} y\n     * @return {?}\n     */\n    setCellPosition(renderer, el, x, y) {\n        if (this.gridster.$options.useTransformPositioning) {\n            /** @type {?} */\n            const transform = 'translate3d(' + x + 'px, ' + y + 'px, 0)';\n            renderer.setStyle(el, 'transform', transform);\n        }\n        else {\n            renderer.setStyle(el, 'left', this.getLeftMargin() + x + 'px');\n            renderer.setStyle(el, 'top', this.getTopMargin() + y + 'px');\n        }\n    }\n    /**\n     * @return {?}\n     */\n    getLeftMargin() {\n        if (this.gridster.$options.outerMargin) {\n            if (this.gridster.$options.outerMarginLeft !== null) {\n                return this.gridster.$options.outerMarginLeft;\n            }\n            else {\n                return this.gridster.$options.margin;\n            }\n        }\n        else {\n            return 0;\n        }\n    }\n    /**\n     * @return {?}\n     */\n    getTopMargin() {\n        if (this.gridster.$options.outerMargin) {\n            if (this.gridster.$options.outerMarginTop !== null) {\n                return this.gridster.$options.outerMarginTop;\n            }\n            else {\n                return this.gridster.$options.margin;\n            }\n        }\n        else {\n            return 0;\n        }\n    }\n}\nGridsterRenderer.decorators = [\n    { type: Injectable }\n];\n/** @nocollapse */\nGridsterRenderer.ctorParameters = () => [\n    { type: GridsterComponentInterface }\n];\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    GridsterRenderer.prototype.gridster;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass GridsterComponent {\n    /**\n     * @param {?} el\n     * @param {?} renderer\n     * @param {?} cdRef\n     * @param {?} zone\n     */\n    constructor(el, renderer, cdRef, zone) {\n        this.renderer = renderer;\n        this.cdRef = cdRef;\n        this.zone = zone;\n        this.columns = 0;\n        this.rows = 0;\n        this.gridColumns = [];\n        this.gridRows = [];\n        this.el = el.nativeElement;\n        this.$options = JSON.parse(JSON.stringify(GridsterConfigService));\n        this.calculateLayoutDebounce = GridsterUtils.debounce(this.calculateLayout.bind(this), 0);\n        this.mobile = false;\n        this.curWidth = 0;\n        this.curHeight = 0;\n        this.grid = [];\n        this.curColWidth = 0;\n        this.curRowHeight = 0;\n        this.dragInProgress = false;\n        this.emptyCell = new GridsterEmptyCell(this);\n        this.compact = new GridsterCompact(this);\n        this.gridRenderer = new GridsterRenderer(this);\n    }\n    /**\n     * @param {?} item\n     * @param {?} item2\n     * @return {?}\n     */\n    static checkCollisionTwoItems(item, item2) {\n        return item.x < item2.x + item2.cols\n            && item.x + item.cols > item2.x\n            && item.y < item2.y + item2.rows\n            && item.y + item.rows > item2.y;\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        if (this.options.initCallback) {\n            this.options.initCallback(this);\n        }\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    ngOnChanges(changes) {\n        if (changes.options) {\n            this.setOptions();\n            this.options.api = {\n                optionsChanged: this.optionsChanged.bind(this),\n                resize: this.onResize.bind(this),\n                getNextPossiblePosition: this.getNextPossiblePosition.bind(this),\n                getFirstPossiblePosition: this.getFirstPossiblePosition.bind(this),\n                getLastPossiblePosition: this.getLastPossiblePosition.bind(this),\n            };\n            this.columns = this.$options.minCols;\n            this.rows = this.$options.minRows;\n            this.setGridSize();\n            this.calculateLayout();\n        }\n    }\n    /**\n     * @return {?}\n     */\n    resize() {\n        /** @type {?} */\n        let height;\n        /** @type {?} */\n        let width;\n        if (this.$options.gridType === 'fit' && !this.mobile) {\n            width = this.el.offsetWidth;\n            height = this.el.offsetHeight;\n        }\n        else {\n            width = this.el.clientWidth;\n            height = this.el.clientHeight;\n        }\n        if ((width !== this.curWidth || height !== this.curHeight) && this.checkIfToResize()) {\n            this.onResize();\n        }\n    }\n    /**\n     * @return {?}\n     */\n    setOptions() {\n        this.$options = GridsterUtils.merge(this.$options, this.options, this.$options);\n        if (!this.$options.disableWindowResize && !this.windowResize) {\n            this.windowResize = this.renderer.listen('window', 'resize', this.onResize.bind(this));\n        }\n        else if (this.$options.disableWindowResize && this.windowResize) {\n            this.windowResize();\n            this.windowResize = null;\n        }\n        this.emptyCell.updateOptions();\n    }\n    /**\n     * @return {?}\n     */\n    optionsChanged() {\n        this.setOptions();\n        /** @type {?} */\n        let widgetsIndex = this.grid.length - 1;\n        /** @type {?} */\n        let widget;\n        for (; widgetsIndex >= 0; widgetsIndex--) {\n            widget = this.grid[widgetsIndex];\n            widget.updateOptions();\n        }\n        this.calculateLayout();\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        if (this.windowResize) {\n            this.windowResize();\n        }\n        if (this.options && this.options.destroyCallback) {\n            this.options.destroyCallback(this);\n        }\n        if (this.options && this.options.api) {\n            this.options.api.resize = undefined;\n            this.options.api.optionsChanged = undefined;\n            this.options.api.getNextPossiblePosition = undefined;\n            this.options.api = undefined;\n        }\n        this.emptyCell.destroy();\n        delete this.emptyCell;\n        this.compact.destroy();\n        delete this.compact;\n    }\n    /**\n     * @return {?}\n     */\n    onResize() {\n        this.setGridSize();\n        this.calculateLayout();\n    }\n    /**\n     * @return {?}\n     */\n    checkIfToResize() {\n        /** @type {?} */\n        const clientWidth = this.el.clientWidth;\n        /** @type {?} */\n        const offsetWidth = this.el.offsetWidth;\n        /** @type {?} */\n        const scrollWidth = this.el.scrollWidth;\n        /** @type {?} */\n        const clientHeight = this.el.clientHeight;\n        /** @type {?} */\n        const offsetHeight = this.el.offsetHeight;\n        /** @type {?} */\n        const scrollHeight = this.el.scrollHeight;\n        /** @type {?} */\n        const verticalScrollPresent = clientWidth < offsetWidth && scrollHeight > offsetHeight\n            && scrollHeight - offsetHeight < offsetWidth - clientWidth;\n        /** @type {?} */\n        const horizontalScrollPresent = clientHeight < offsetHeight\n            && scrollWidth > offsetWidth && scrollWidth - offsetWidth < offsetHeight - clientHeight;\n        if (verticalScrollPresent) {\n            return false;\n        }\n        return !horizontalScrollPresent;\n    }\n    /**\n     * @return {?}\n     */\n    setGridSize() {\n        /** @type {?} */\n        const el = this.el;\n        /** @type {?} */\n        let width = el.clientWidth;\n        /** @type {?} */\n        let height = el.clientHeight;\n        if (this.$options.setGridSize || this.$options.gridType === 'fit' && !this.mobile) {\n            width = el.offsetWidth;\n            height = el.offsetHeight;\n        }\n        else {\n            width = el.clientWidth;\n            height = el.clientHeight;\n        }\n        this.curWidth = width;\n        this.curHeight = height;\n    }\n    /**\n     * @return {?}\n     */\n    setGridDimensions() {\n        this.setGridSize();\n        if (!this.mobile && this.$options.mobileBreakpoint > this.curWidth) {\n            this.mobile = !this.mobile;\n            this.renderer.addClass(this.el, 'mobile');\n        }\n        else if (this.mobile && this.$options.mobileBreakpoint < this.curWidth) {\n            this.mobile = !this.mobile;\n            this.renderer.removeClass(this.el, 'mobile');\n        }\n        /** @type {?} */\n        let rows = this.$options.minRows;\n        /** @type {?} */\n        let columns = this.$options.minCols;\n        /** @type {?} */\n        let widgetsIndex = this.grid.length - 1;\n        /** @type {?} */\n        let widget;\n        for (; widgetsIndex >= 0; widgetsIndex--) {\n            widget = this.grid[widgetsIndex];\n            if (!widget.notPlaced) {\n                rows = Math.max(rows, widget.$item.y + widget.$item.rows);\n                columns = Math.max(columns, widget.$item.x + widget.$item.cols);\n            }\n        }\n        if (this.columns !== columns || this.rows !== rows) {\n            this.columns = columns;\n            this.rows = rows;\n            if (this.options.gridSizeChangedCallback) {\n                this.options.gridSizeChangedCallback(this);\n            }\n        }\n    }\n    /**\n     * @return {?}\n     */\n    calculateLayout() {\n        if (this.compact) {\n            this.compact.checkCompact();\n        }\n        this.setGridDimensions();\n        if (this.$options.outerMargin) {\n            /** @type {?} */\n            let marginWidth = -this.$options.margin;\n            if (this.$options.outerMarginLeft !== null) {\n                marginWidth += this.$options.outerMarginLeft;\n                this.renderer.setStyle(this.el, 'padding-left', this.$options.outerMarginLeft + 'px');\n            }\n            else {\n                marginWidth += this.$options.margin;\n                this.renderer.setStyle(this.el, 'padding-left', this.$options.margin + 'px');\n            }\n            if (this.$options.outerMarginRight !== null) {\n                marginWidth += this.$options.outerMarginRight;\n                this.renderer.setStyle(this.el, 'padding-right', this.$options.outerMarginRight + 'px');\n            }\n            else {\n                marginWidth += this.$options.margin;\n                this.renderer.setStyle(this.el, 'padding-right', this.$options.margin + 'px');\n            }\n            this.curColWidth = (this.curWidth - marginWidth) / this.columns;\n            /** @type {?} */\n            let marginHeight = -this.$options.margin;\n            if (this.$options.outerMarginTop !== null) {\n                marginHeight += this.$options.outerMarginTop;\n                this.renderer.setStyle(this.el, 'padding-top', this.$options.outerMarginTop + 'px');\n            }\n            else {\n                marginHeight += this.$options.margin;\n                this.renderer.setStyle(this.el, 'padding-top', this.$options.margin + 'px');\n            }\n            if (this.$options.outerMarginBottom !== null) {\n                marginHeight += this.$options.outerMarginBottom;\n                this.renderer.setStyle(this.el, 'padding-bottom', this.$options.outerMarginBottom + 'px');\n            }\n            else {\n                marginHeight += this.$options.margin;\n                this.renderer.setStyle(this.el, 'padding-bottom', this.$options.margin + 'px');\n            }\n            this.curRowHeight = (this.curHeight - marginHeight) / this.rows;\n        }\n        else {\n            this.curColWidth = (this.curWidth + this.$options.margin) / this.columns;\n            this.curRowHeight = (this.curHeight + this.$options.margin) / this.rows;\n            this.renderer.setStyle(this.el, 'padding-left', 0 + 'px');\n            this.renderer.setStyle(this.el, 'padding-right', 0 + 'px');\n            this.renderer.setStyle(this.el, 'padding-top', 0 + 'px');\n            this.renderer.setStyle(this.el, 'padding-bottom', 0 + 'px');\n        }\n        this.gridRenderer.updateGridster();\n        this.updateGrid();\n        if (this.$options.setGridSize) {\n            this.renderer.setStyle(this.el, 'width', (this.columns * this.curColWidth + this.$options.margin) + 'px');\n            this.renderer.setStyle(this.el, 'height', (this.rows * this.curRowHeight + this.$options.margin) + 'px');\n        }\n        else {\n            this.renderer.setStyle(this.el, 'width', '');\n            this.renderer.setStyle(this.el, 'height', '');\n        }\n        /** @type {?} */\n        let widgetsIndex = this.grid.length - 1;\n        /** @type {?} */\n        let widget;\n        for (; widgetsIndex >= 0; widgetsIndex--) {\n            widget = this.grid[widgetsIndex];\n            widget.setSize();\n            widget.drag.toggle();\n            widget.resize.toggle();\n        }\n        setTimeout(this.resize.bind(this), 100);\n    }\n    /**\n     * @return {?}\n     */\n    updateGrid() {\n        if (this.$options.displayGrid === 'always' && !this.mobile) {\n            this.renderer.addClass(this.el, 'display-grid');\n        }\n        else if (this.$options.displayGrid === 'onDrag&Resize' && this.dragInProgress) {\n            this.renderer.addClass(this.el, 'display-grid');\n        }\n        else if (this.$options.displayGrid === 'none' || !this.dragInProgress || this.mobile) {\n            this.renderer.removeClass(this.el, 'display-grid');\n        }\n        this.setGridDimensions();\n        this.gridColumns.length = Math.max(this.columns, Math.floor(this.curWidth / this.curColWidth)) || 0;\n        this.gridRows.length = Math.max(this.rows, Math.floor(this.curHeight / this.curRowHeight)) || 0;\n        this.cdRef.markForCheck();\n    }\n    /**\n     * @param {?} itemComponent\n     * @return {?}\n     */\n    addItem(itemComponent) {\n        if (itemComponent.$item.cols === undefined) {\n            itemComponent.$item.cols = this.$options.defaultItemCols;\n            itemComponent.item.cols = itemComponent.$item.cols;\n            itemComponent.itemChanged();\n        }\n        if (itemComponent.$item.rows === undefined) {\n            itemComponent.$item.rows = this.$options.defaultItemRows;\n            itemComponent.item.rows = itemComponent.$item.rows;\n            itemComponent.itemChanged();\n        }\n        if (itemComponent.$item.x === -1 || itemComponent.$item.y === -1) {\n            this.autoPositionItem(itemComponent);\n        }\n        else if (this.checkCollision(itemComponent.$item)) {\n            if (!this.$options.disableWarnings) {\n                itemComponent.notPlaced = true;\n                console.warn('Can\\'t be placed in the bounds of the dashboard, trying to auto position!/n' +\n                    JSON.stringify(itemComponent.item, ['cols', 'rows', 'x', 'y']));\n            }\n            if (!this.$options.disableAutoPositionOnConflict) {\n                this.autoPositionItem(itemComponent);\n            }\n            else {\n                itemComponent.notPlaced = true;\n            }\n        }\n        this.grid.push(itemComponent);\n        this.calculateLayoutDebounce();\n    }\n    /**\n     * @param {?} itemComponent\n     * @return {?}\n     */\n    removeItem(itemComponent) {\n        this.grid.splice(this.grid.indexOf(itemComponent), 1);\n        this.calculateLayoutDebounce();\n        if (this.options.itemRemovedCallback) {\n            this.options.itemRemovedCallback(itemComponent.item, itemComponent);\n        }\n    }\n    /**\n     * @param {?} item\n     * @return {?}\n     */\n    checkCollision(item) {\n        /** @type {?} */\n        let collision = false;\n        if (this.options.itemValidateCallback) {\n            collision = !this.options.itemValidateCallback(item);\n        }\n        if (!collision && this.checkGridCollision(item)) {\n            collision = true;\n        }\n        if (!collision) {\n            /** @type {?} */\n            const c = this.findItemWithItem(item);\n            if (c) {\n                collision = c;\n            }\n        }\n        return collision;\n    }\n    /**\n     * @param {?} item\n     * @return {?}\n     */\n    checkGridCollision(item) {\n        /** @type {?} */\n        const noNegativePosition = item.y > -1 && item.x > -1;\n        /** @type {?} */\n        const maxGridCols = item.cols + item.x <= this.$options.maxCols;\n        /** @type {?} */\n        const maxGridRows = item.rows + item.y <= this.$options.maxRows;\n        /** @type {?} */\n        const maxItemCols = item.maxItemCols === undefined ? this.$options.maxItemCols : item.maxItemCols;\n        /** @type {?} */\n        const minItemCols = item.minItemCols === undefined ? this.$options.minItemCols : item.minItemCols;\n        /** @type {?} */\n        const maxItemRows = item.maxItemRows === undefined ? this.$options.maxItemRows : item.maxItemRows;\n        /** @type {?} */\n        const minItemRows = item.minItemRows === undefined ? this.$options.minItemRows : item.minItemRows;\n        /** @type {?} */\n        const inColsLimits = item.cols <= maxItemCols && item.cols >= minItemCols;\n        /** @type {?} */\n        const inRowsLimits = item.rows <= maxItemRows && item.rows >= minItemRows;\n        /** @type {?} */\n        const minAreaLimit = item.minItemArea === undefined ? this.$options.minItemArea : item.minItemArea;\n        /** @type {?} */\n        const maxAreaLimit = item.maxItemArea === undefined ? this.$options.maxItemArea : item.maxItemArea;\n        /** @type {?} */\n        const area = item.cols * item.rows;\n        /** @type {?} */\n        const inMinArea = minAreaLimit <= area;\n        /** @type {?} */\n        const inMaxArea = maxAreaLimit >= area;\n        return !(noNegativePosition && maxGridCols && maxGridRows && inColsLimits && inRowsLimits && inMinArea && inMaxArea);\n    }\n    /**\n     * @param {?} item\n     * @return {?}\n     */\n    findItemWithItem(item) {\n        /** @type {?} */\n        let widgetsIndex = this.grid.length - 1;\n        /** @type {?} */\n        let widget;\n        for (; widgetsIndex > -1; widgetsIndex--) {\n            widget = this.grid[widgetsIndex];\n            if (widget.$item !== item && GridsterComponent.checkCollisionTwoItems(widget.$item, item)) {\n                return widget;\n            }\n        }\n        return false;\n    }\n    /**\n     * @param {?} item\n     * @return {?}\n     */\n    findItemsWithItem(item) {\n        /** @type {?} */\n        const a = [];\n        /** @type {?} */\n        let widgetsIndex = this.grid.length - 1;\n        /** @type {?} */\n        let widget;\n        for (; widgetsIndex > -1; widgetsIndex--) {\n            widget = this.grid[widgetsIndex];\n            if (widget.$item !== item && GridsterComponent.checkCollisionTwoItems(widget.$item, item)) {\n                a.push(widget);\n            }\n        }\n        return a;\n    }\n    /**\n     * @param {?} itemComponent\n     * @return {?}\n     */\n    autoPositionItem(itemComponent) {\n        if (this.getNextPossiblePosition(itemComponent.$item)) {\n            itemComponent.notPlaced = false;\n            itemComponent.item.x = itemComponent.$item.x;\n            itemComponent.item.y = itemComponent.$item.y;\n            itemComponent.itemChanged();\n        }\n        else {\n            itemComponent.notPlaced = true;\n            if (!this.$options.disableWarnings) {\n                console.warn('Can\\'t be placed in the bounds of the dashboard!/n' +\n                    JSON.stringify(itemComponent.item, ['cols', 'rows', 'x', 'y']));\n            }\n        }\n    }\n    /**\n     * @param {?} newItem\n     * @param {?=} startingFrom\n     * @return {?}\n     */\n    getNextPossiblePosition(newItem, startingFrom = {}) {\n        if (newItem.cols === -1) {\n            newItem.cols = this.$options.defaultItemCols;\n        }\n        if (newItem.rows === -1) {\n            newItem.rows = this.$options.defaultItemRows;\n        }\n        this.setGridDimensions();\n        /** @type {?} */\n        let rowsIndex = startingFrom.y || 0;\n        /** @type {?} */\n        let colsIndex;\n        for (; rowsIndex < this.rows; rowsIndex++) {\n            newItem.y = rowsIndex;\n            colsIndex = startingFrom.x || 0;\n            for (; colsIndex < this.columns; colsIndex++) {\n                newItem.x = colsIndex;\n                if (!this.checkCollision(newItem)) {\n                    return true;\n                }\n            }\n        }\n        /** @type {?} */\n        const canAddToRows = this.$options.maxRows >= this.rows + newItem.rows;\n        /** @type {?} */\n        const canAddToColumns = this.$options.maxCols >= this.columns + newItem.cols;\n        /** @type {?} */\n        const addToRows = this.rows <= this.columns && canAddToRows;\n        if (!addToRows && canAddToColumns) {\n            newItem.x = this.columns;\n            newItem.y = 0;\n            return true;\n        }\n        else if (canAddToRows) {\n            newItem.y = this.rows;\n            newItem.x = 0;\n            return true;\n        }\n        return false;\n    }\n    /**\n     * @param {?} item\n     * @return {?}\n     */\n    getFirstPossiblePosition(item) {\n        /** @type {?} */\n        const tmpItem = Object.assign({}, item);\n        this.getNextPossiblePosition(tmpItem);\n        return tmpItem;\n    }\n    /**\n     * @param {?} item\n     * @return {?}\n     */\n    getLastPossiblePosition(item) {\n        /** @type {?} */\n        let farthestItem = { y: 0, x: 0 };\n        farthestItem = this.grid.reduce((/**\n         * @param {?} prev\n         * @param {?} curr\n         * @return {?}\n         */\n        (prev, curr) => {\n            /** @type {?} */\n            const currCoords = { y: curr.$item.y + curr.$item.rows - 1, x: curr.$item.x + curr.$item.cols - 1 };\n            if (GridsterUtils.compareItems(prev, currCoords) === 1) {\n                return currCoords;\n            }\n            else {\n                return prev;\n            }\n        }), farthestItem);\n        /** @type {?} */\n        const tmpItem = Object.assign({}, item);\n        this.getNextPossiblePosition(tmpItem, farthestItem);\n        return tmpItem;\n    }\n    /**\n     * @param {?} x\n     * @param {?} roundingMethod\n     * @param {?=} noLimit\n     * @return {?}\n     */\n    pixelsToPositionX(x, roundingMethod, noLimit) {\n        /** @type {?} */\n        const position = roundingMethod(x / this.curColWidth);\n        if (noLimit) {\n            return position;\n        }\n        else {\n            return Math.max(position, 0);\n        }\n    }\n    /**\n     * @param {?} y\n     * @param {?} roundingMethod\n     * @param {?=} noLimit\n     * @return {?}\n     */\n    pixelsToPositionY(y, roundingMethod, noLimit) {\n        /** @type {?} */\n        const position = roundingMethod(y / this.curRowHeight);\n        if (noLimit) {\n            return position;\n        }\n        else {\n            return Math.max(position, 0);\n        }\n    }\n    /**\n     * @param {?} x\n     * @return {?}\n     */\n    positionXToPixels(x) {\n        return x * this.curColWidth;\n    }\n    /**\n     * @param {?} y\n     * @return {?}\n     */\n    positionYToPixels(y) {\n        return y * this.curRowHeight;\n    }\n    // ------ Functions for swapWhileDragging option\n    // identical to checkCollision() except that here we add bondaries. \n    /**\n     * @param {?} item\n     * @param {?} item2\n     * @return {?}\n     */\n    static checkCollisionTwoItemsForSwaping(item, item2) {\n        // if the cols or rows of the items are 1 , doesnt make any sense to set a boundary. Only if the item is bigger we set a boundary\n        /** @type {?} */\n        const horizontalBoundaryItem1 = item.cols === 1 ? 0 : 1;\n        /** @type {?} */\n        const horizontalBoundaryItem2 = item2.cols === 1 ? 0 : 1;\n        /** @type {?} */\n        const verticalBoundaryItem1 = item.rows === 1 ? 0 : 1;\n        /** @type {?} */\n        const verticalBoundaryItem2 = item2.rows === 1 ? 0 : 1;\n        return item.x + horizontalBoundaryItem1 < item2.x + item2.cols\n            && item.x + item.cols > item2.x + horizontalBoundaryItem2\n            && item.y + verticalBoundaryItem1 < item2.y + item2.rows\n            && item.y + item.rows > item2.y + verticalBoundaryItem2;\n    }\n    // identical to checkCollision() except that this function calls findItemWithItemForSwaping() instead of findItemWithItem()\n    /**\n     * @param {?} item\n     * @return {?}\n     */\n    checkCollisionForSwaping(item) {\n        /** @type {?} */\n        let collision = false;\n        if (this.options.itemValidateCallback) {\n            collision = !this.options.itemValidateCallback(item);\n        }\n        if (!collision && this.checkGridCollision(item)) {\n            collision = true;\n        }\n        if (!collision) {\n            /** @type {?} */\n            const c = this.findItemWithItemForSwaping(item);\n            if (c) {\n                collision = c;\n            }\n        }\n        return collision;\n    }\n    // identical to findItemWithItem() except that this function calls checkCollisionTwoItemsForSwaping() instead of checkCollisionTwoItems()\n    /**\n     * @param {?} item\n     * @return {?}\n     */\n    findItemWithItemForSwaping(item) {\n        /** @type {?} */\n        let widgetsIndex = this.grid.length - 1;\n        /** @type {?} */\n        let widget;\n        for (; widgetsIndex > -1; widgetsIndex--) {\n            widget = this.grid[widgetsIndex];\n            if (widget.$item !== item && GridsterComponent.checkCollisionTwoItemsForSwaping(widget.$item, item)) {\n                return widget;\n            }\n        }\n        return false;\n    }\n}\nGridsterComponent.decorators = [\n    { type: Component, args: [{\n                selector: 'gridster',\n                template: \"<div class=\\\"gridster-column\\\" *ngFor=\\\"let column of gridColumns; let i = index;\\\"\\n     [ngStyle]=\\\"gridRenderer.getGridColumnStyle(i)\\\"></div>\\n<div class=\\\"gridster-row\\\" *ngFor=\\\"let row of gridRows; let i = index;\\\"\\n     [ngStyle]=\\\"gridRenderer.getGridRowStyle(i)\\\"></div>\\n<ng-content></ng-content>\\n<gridster-preview class=\\\"gridster-preview\\\"></gridster-preview>\\n\",\n                encapsulation: ViewEncapsulation.None,\n                styles: [\"gridster{position:relative;box-sizing:border-box;background:grey;width:100%;height:100%;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;display:block}gridster.fit{overflow-x:hidden;overflow-y:hidden}gridster.scrollVertical{overflow-x:hidden;overflow-y:auto}gridster.scrollHorizontal{overflow-x:auto;overflow-y:hidden}gridster.fixed{overflow:auto}gridster.mobile{overflow-x:hidden;overflow-y:auto}gridster.mobile gridster-item{position:relative}gridster .gridster-column,gridster .gridster-row{position:absolute;display:none;transition:.3s;box-sizing:border-box}gridster.display-grid .gridster-column,gridster.display-grid .gridster-row{display:block}gridster .gridster-column{border-left:1px solid #fff;border-right:1px solid #fff}gridster .gridster-row{border-top:1px solid #fff;border-bottom:1px solid #fff}\"]\n            }] }\n];\n/** @nocollapse */\nGridsterComponent.ctorParameters = () => [\n    { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] },\n    { type: Renderer2, decorators: [{ type: Inject, args: [Renderer2,] }] },\n    { type: ChangeDetectorRef, decorators: [{ type: Inject, args: [ChangeDetectorRef,] }] },\n    { type: NgZone, decorators: [{ type: Inject, args: [NgZone,] }] }\n];\nGridsterComponent.propDecorators = {\n    options: [{ type: Input }]\n};\nif (false) {\n    /** @type {?} */\n    GridsterComponent.prototype.options;\n    /** @type {?} */\n    GridsterComponent.prototype.calculateLayoutDebounce;\n    /** @type {?} */\n    GridsterComponent.prototype.movingItem;\n    /** @type {?} */\n    GridsterComponent.prototype.previewStyle;\n    /** @type {?} */\n    GridsterComponent.prototype.el;\n    /** @type {?} */\n    GridsterComponent.prototype.$options;\n    /** @type {?} */\n    GridsterComponent.prototype.mobile;\n    /** @type {?} */\n    GridsterComponent.prototype.curWidth;\n    /** @type {?} */\n    GridsterComponent.prototype.curHeight;\n    /** @type {?} */\n    GridsterComponent.prototype.grid;\n    /** @type {?} */\n    GridsterComponent.prototype.columns;\n    /** @type {?} */\n    GridsterComponent.prototype.rows;\n    /** @type {?} */\n    GridsterComponent.prototype.curColWidth;\n    /** @type {?} */\n    GridsterComponent.prototype.curRowHeight;\n    /** @type {?} */\n    GridsterComponent.prototype.gridColumns;\n    /** @type {?} */\n    GridsterComponent.prototype.gridRows;\n    /** @type {?} */\n    GridsterComponent.prototype.windowResize;\n    /** @type {?} */\n    GridsterComponent.prototype.dragInProgress;\n    /** @type {?} */\n    GridsterComponent.prototype.emptyCell;\n    /** @type {?} */\n    GridsterComponent.prototype.compact;\n    /** @type {?} */\n    GridsterComponent.prototype.gridRenderer;\n    /** @type {?} */\n    GridsterComponent.prototype.renderer;\n    /** @type {?} */\n    GridsterComponent.prototype.cdRef;\n    /** @type {?} */\n    GridsterComponent.prototype.zone;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @abstract\n */\nclass GridsterItemComponentInterface {\n}\nif (false) {\n    /** @type {?} */\n    GridsterItemComponentInterface.prototype.item;\n    /** @type {?} */\n    GridsterItemComponentInterface.prototype.$item;\n    /** @type {?} */\n    GridsterItemComponentInterface.prototype.top;\n    /** @type {?} */\n    GridsterItemComponentInterface.prototype.left;\n    /** @type {?} */\n    GridsterItemComponentInterface.prototype.width;\n    /** @type {?} */\n    GridsterItemComponentInterface.prototype.height;\n    /** @type {?} */\n    GridsterItemComponentInterface.prototype.drag;\n    /** @type {?} */\n    GridsterItemComponentInterface.prototype.resize;\n    /** @type {?} */\n    GridsterItemComponentInterface.prototype.notPlaced;\n    /** @type {?} */\n    GridsterItemComponentInterface.prototype.updateOptions;\n    /** @type {?} */\n    GridsterItemComponentInterface.prototype.itemChanged;\n    /** @type {?} */\n    GridsterItemComponentInterface.prototype.setSize;\n    /** @type {?} */\n    GridsterItemComponentInterface.prototype.checkItemChanges;\n    /** @type {?} */\n    GridsterItemComponentInterface.prototype.canBeDragged;\n    /** @type {?} */\n    GridsterItemComponentInterface.prototype.canBeResized;\n    /** @type {?} */\n    GridsterItemComponentInterface.prototype.el;\n    /** @type {?} */\n    GridsterItemComponentInterface.prototype.gridster;\n    /** @type {?} */\n    GridsterItemComponentInterface.prototype.renderer;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass GridsterSwap {\n    /**\n     * @param {?} gridsterItem\n     */\n    constructor(gridsterItem) {\n        this.gridsterItem = gridsterItem;\n        this.gridster = gridsterItem.gridster;\n    }\n    /**\n     * @return {?}\n     */\n    destroy() {\n        delete this.gridster;\n        delete this.gridsterItem;\n        delete this.swapedItem;\n    }\n    /**\n     * @return {?}\n     */\n    swapItems() {\n        if (this.gridster.$options.swap) {\n            this.checkSwapBack();\n            this.checkSwap(this.gridsterItem);\n        }\n    }\n    /**\n     * @return {?}\n     */\n    checkSwapBack() {\n        if (this.swapedItem) {\n            /** @type {?} */\n            const x = this.swapedItem.$item.x;\n            /** @type {?} */\n            const y = this.swapedItem.$item.y;\n            this.swapedItem.$item.x = this.swapedItem.item.x || 0;\n            this.swapedItem.$item.y = this.swapedItem.item.y || 0;\n            if (this.gridster.checkCollision(this.swapedItem.$item)) {\n                this.swapedItem.$item.x = x;\n                this.swapedItem.$item.y = y;\n            }\n            else {\n                this.swapedItem.setSize();\n                this.gridsterItem.$item.x = this.gridsterItem.item.x || 0;\n                this.gridsterItem.$item.y = this.gridsterItem.item.y || 0;\n                this.swapedItem = undefined;\n            }\n        }\n    }\n    /**\n     * @return {?}\n     */\n    restoreSwapItem() {\n        if (this.swapedItem) {\n            this.swapedItem.$item.x = this.swapedItem.item.x || 0;\n            this.swapedItem.$item.y = this.swapedItem.item.y || 0;\n            this.swapedItem.setSize();\n            this.swapedItem = undefined;\n        }\n    }\n    /**\n     * @return {?}\n     */\n    setSwapItem() {\n        if (this.swapedItem) {\n            this.swapedItem.checkItemChanges(this.swapedItem.$item, this.swapedItem.item);\n            this.swapedItem = undefined;\n        }\n    }\n    /**\n     * @param {?} pushedBy\n     * @return {?}\n     */\n    checkSwap(pushedBy) {\n        /** @type {?} */\n        let gridsterItemCollision;\n        if (this.gridster.$options.swapWhileDragging) {\n            gridsterItemCollision = this.gridster.checkCollisionForSwaping(pushedBy.$item);\n        }\n        else {\n            gridsterItemCollision = this.gridster.checkCollision(pushedBy.$item);\n        }\n        if (gridsterItemCollision && gridsterItemCollision !== true && gridsterItemCollision.canBeDragged()) {\n            /** @type {?} */\n            const gridsterItemCollide = gridsterItemCollision;\n            /** @type {?} */\n            const copyCollisionX = gridsterItemCollide.$item.x;\n            /** @type {?} */\n            const copyCollisionY = gridsterItemCollide.$item.y;\n            /** @type {?} */\n            const copyX = pushedBy.$item.x;\n            /** @type {?} */\n            const copyY = pushedBy.$item.y;\n            gridsterItemCollide.$item.x = pushedBy.item.x || 0;\n            gridsterItemCollide.$item.y = pushedBy.item.y || 0;\n            pushedBy.$item.x = gridsterItemCollide.item.x || 0;\n            pushedBy.$item.y = gridsterItemCollide.item.y || 0;\n            if (this.gridster.checkCollision(gridsterItemCollide.$item) || this.gridster.checkCollision(pushedBy.$item)) {\n                pushedBy.$item.x = copyX;\n                pushedBy.$item.y = copyY;\n                gridsterItemCollide.$item.x = copyCollisionX;\n                gridsterItemCollide.$item.y = copyCollisionY;\n            }\n            else {\n                gridsterItemCollide.setSize();\n                this.swapedItem = gridsterItemCollide;\n                if (this.gridster.$options.swapWhileDragging) {\n                    this.gridsterItem.checkItemChanges(this.gridsterItem.$item, this.gridsterItem.item);\n                    this.setSwapItem();\n                }\n            }\n        }\n    }\n}\nGridsterSwap.decorators = [\n    { type: Injectable }\n];\n/** @nocollapse */\nGridsterSwap.ctorParameters = () => [\n    { type: GridsterItemComponentInterface }\n];\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    GridsterSwap.prototype.swapedItem;\n    /**\n     * @type {?}\n     * @private\n     */\n    GridsterSwap.prototype.gridsterItem;\n    /**\n     * @type {?}\n     * @private\n     */\n    GridsterSwap.prototype.gridster;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nlet scrollSensitivity;\n/** @type {?} */\nlet scrollSpeed;\n/** @type {?} */\nconst intervalDuration = 50;\n/** @type {?} */\nlet gridsterElement;\n/** @type {?} */\nlet resizeEvent;\n/** @type {?} */\nlet resizeEventType;\n/** @type {?} */\nlet intervalE;\n/** @type {?} */\nlet intervalW;\n/** @type {?} */\nlet intervalN;\n/** @type {?} */\nlet intervalS;\n/**\n * @param {?} gridster\n * @param {?} left\n * @param {?} top\n * @param {?} width\n * @param {?} height\n * @param {?} e\n * @param {?} lastMouse\n * @param {?} calculateItemPosition\n * @param {?=} resize\n * @param {?=} resizeEventScrollType\n * @return {?}\n */\nfunction scroll(gridster, left, top, width, height, e, lastMouse, calculateItemPosition, resize, resizeEventScrollType) {\n    scrollSensitivity = gridster.$options.scrollSensitivity;\n    scrollSpeed = gridster.$options.scrollSpeed;\n    gridsterElement = gridster.el;\n    resizeEvent = resize;\n    resizeEventType = resizeEventScrollType;\n    /** @type {?} */\n    const offsetWidth = gridsterElement.offsetWidth;\n    /** @type {?} */\n    const offsetHeight = gridsterElement.offsetHeight;\n    /** @type {?} */\n    const offsetLeft = gridsterElement.scrollLeft;\n    /** @type {?} */\n    const offsetTop = gridsterElement.scrollTop;\n    /** @type {?} */\n    const elemTopOffset = top - offsetTop;\n    /** @type {?} */\n    const elemBottomOffset = offsetHeight + offsetTop - top - height;\n    if (!gridster.$options.disableScrollVertical) {\n        if (lastMouse.clientY < e.clientY && elemBottomOffset < scrollSensitivity) {\n            cancelN();\n            if ((resizeEvent && resizeEventType && !resizeEventType.s) || intervalS) {\n                return;\n            }\n            intervalS = startVertical(1, calculateItemPosition, lastMouse);\n        }\n        else if (lastMouse.clientY > e.clientY && offsetTop > 0 && elemTopOffset < scrollSensitivity) {\n            cancelS();\n            if ((resizeEvent && resizeEventType && !resizeEventType.n) || intervalN) {\n                return;\n            }\n            intervalN = startVertical(-1, calculateItemPosition, lastMouse);\n        }\n        else if (lastMouse.clientY !== e.clientY) {\n            cancelVertical();\n        }\n    }\n    /** @type {?} */\n    const elemRightOffset = offsetLeft + offsetWidth - left - width;\n    /** @type {?} */\n    const elemLeftOffset = left - offsetLeft;\n    if (!gridster.$options.disableScrollHorizontal) {\n        if (lastMouse.clientX < e.clientX && elemRightOffset <= scrollSensitivity) {\n            cancelW();\n            if ((resizeEvent && resizeEventType && !resizeEventType.e) || intervalE) {\n                return;\n            }\n            intervalE = startHorizontal(1, calculateItemPosition, lastMouse);\n        }\n        else if (lastMouse.clientX > e.clientX && offsetLeft > 0 && elemLeftOffset < scrollSensitivity) {\n            cancelE();\n            if ((resizeEvent && resizeEventType && !resizeEventType.w) || intervalW) {\n                return;\n            }\n            intervalW = startHorizontal(-1, calculateItemPosition, lastMouse);\n        }\n        else if (lastMouse.clientX !== e.clientX) {\n            cancelHorizontal();\n        }\n    }\n}\n/**\n * @param {?} sign\n * @param {?} calculateItemPosition\n * @param {?} lastMouse\n * @return {?}\n */\nfunction startVertical(sign, calculateItemPosition, lastMouse) {\n    /** @type {?} */\n    let clientY = lastMouse.clientY;\n    return setInterval((/**\n     * @return {?}\n     */\n    () => {\n        if (!gridsterElement || sign === -1 && gridsterElement.scrollTop - scrollSpeed < 0) {\n            cancelVertical();\n        }\n        gridsterElement.scrollTop += sign * scrollSpeed;\n        clientY += sign * scrollSpeed;\n        calculateItemPosition({ clientX: lastMouse.clientX, clientY: clientY });\n    }), intervalDuration);\n}\n/**\n * @param {?} sign\n * @param {?} calculateItemPosition\n * @param {?} lastMouse\n * @return {?}\n */\nfunction startHorizontal(sign, calculateItemPosition, lastMouse) {\n    /** @type {?} */\n    let clientX = lastMouse.clientX;\n    return setInterval((/**\n     * @return {?}\n     */\n    () => {\n        if (!gridsterElement || sign === -1 && gridsterElement.scrollLeft - scrollSpeed < 0) {\n            cancelHorizontal();\n        }\n        gridsterElement.scrollLeft += sign * scrollSpeed;\n        clientX += sign * scrollSpeed;\n        calculateItemPosition({ clientX: clientX, clientY: lastMouse.clientY });\n    }), intervalDuration);\n}\n/**\n * @return {?}\n */\nfunction cancelScroll() {\n    cancelHorizontal();\n    cancelVertical();\n    gridsterElement = undefined;\n}\n/**\n * @return {?}\n */\nfunction cancelHorizontal() {\n    cancelE();\n    cancelW();\n}\n/**\n * @return {?}\n */\nfunction cancelVertical() {\n    cancelN();\n    cancelS();\n}\n/**\n * @return {?}\n */\nfunction cancelE() {\n    if (intervalE) {\n        clearInterval(intervalE);\n        intervalE = 0;\n    }\n}\n/**\n * @return {?}\n */\nfunction cancelW() {\n    if (intervalW) {\n        clearInterval(intervalW);\n        intervalW = 0;\n    }\n}\n/**\n * @return {?}\n */\nfunction cancelS() {\n    if (intervalS) {\n        clearInterval(intervalS);\n        intervalS = 0;\n    }\n}\n/**\n * @return {?}\n */\nfunction cancelN() {\n    if (intervalN) {\n        clearInterval(intervalN);\n        intervalN = 0;\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass GridsterPush {\n    /**\n     * @param {?} gridsterItem\n     */\n    constructor(gridsterItem) {\n        this.pushedItems = [];\n        this.pushedItemsTemp = [];\n        this.pushedItemsTempPath = [];\n        this.pushedItemsPath = [];\n        gridsterItem['id'] = this.generateTempRandomId();\n        this.gridsterItem = gridsterItem;\n        this.gridster = gridsterItem.gridster;\n        this.tryPattern = {\n            fromEast: [this.tryWest, this.trySouth, this.tryNorth, this.tryEast],\n            fromWest: [this.tryEast, this.trySouth, this.tryNorth, this.tryWest],\n            fromNorth: [this.trySouth, this.tryEast, this.tryWest, this.tryNorth],\n            fromSouth: [this.tryNorth, this.tryEast, this.tryWest, this.trySouth]\n        };\n        this.fromSouth = 'fromSouth';\n        this.fromNorth = 'fromNorth';\n        this.fromEast = 'fromEast';\n        this.fromWest = 'fromWest';\n    }\n    /**\n     * @return {?}\n     */\n    destroy() {\n        delete this.gridster;\n        delete this.gridsterItem;\n    }\n    /**\n     * @param {?} direction\n     * @param {?=} disable\n     * @return {?}\n     */\n    pushItems(direction, disable) {\n        if (this.gridster.$options.pushItems && !disable) {\n            this.pushedItemsOrder = [];\n            /** @type {?} */\n            const pushed = this.push(this.gridsterItem, direction);\n            if (!pushed) {\n                this.restoreTempItems();\n            }\n            this.pushedItemsOrder = [];\n            this.pushedItemsTemp = [];\n            this.pushedItemsTempPath = [];\n            this.cleanTempIds();\n            return pushed;\n        }\n        else {\n            return false;\n        }\n    }\n    /**\n     * @return {?}\n     */\n    restoreTempItems() {\n        /** @type {?} */\n        let i = this.pushedItemsTemp.length - 1;\n        for (; i > -1; i--) {\n            this.removeFromTempPushed(this.pushedItemsTemp[i]);\n        }\n    }\n    /**\n     * @return {?}\n     */\n    restoreItems() {\n        /** @type {?} */\n        let i = 0;\n        /** @type {?} */\n        const l = this.pushedItems.length;\n        /** @type {?} */\n        let pushedItem;\n        for (; i < l; i++) {\n            pushedItem = this.pushedItems[i];\n            pushedItem.$item.x = pushedItem.item.x || 0;\n            pushedItem.$item.y = pushedItem.item.y || 0;\n            pushedItem.setSize();\n        }\n        this.pushedItems = [];\n        this.pushedItemsPath = [];\n    }\n    /**\n     * @return {?}\n     */\n    setPushedItems() {\n        /** @type {?} */\n        let i = 0;\n        /** @type {?} */\n        const l = this.pushedItems.length;\n        /** @type {?} */\n        let pushedItem;\n        for (; i < l; i++) {\n            pushedItem = this.pushedItems[i];\n            pushedItem.checkItemChanges(pushedItem.$item, pushedItem.item);\n        }\n        this.pushedItems = [];\n        this.pushedItemsPath = [];\n    }\n    /**\n     * @return {?}\n     */\n    checkPushBack() {\n        /** @type {?} */\n        let i = this.pushedItems.length - 1;\n        /** @type {?} */\n        let change = false;\n        for (; i > -1; i--) {\n            if (this.checkPushedItem(this.pushedItems[i], i)) {\n                change = true;\n            }\n        }\n        if (change) {\n            this.checkPushBack();\n        }\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    generateTempRandomId() {\n        return Math.random().toString(36).replace(/[^a-z]+/g, '').substr(2, 10);\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    cleanTempIds() {\n        /** @type {?} */\n        const allItemsWithIds = this.gridster.grid.filter((/**\n         * @param {?} el\n         * @return {?}\n         */\n        (el) => el['id']));\n        allItemsWithIds.forEach((/**\n         * @param {?} el\n         * @return {?}\n         */\n        (el) => delete el['id']));\n    }\n    /**\n     * @private\n     * @param {?} gridsterItem\n     * @param {?} direction\n     * @return {?}\n     */\n    push(gridsterItem, direction) {\n        if (this.gridster.checkGridCollision(gridsterItem.$item)) {\n            return false;\n        }\n        if (direction === '') {\n            return false;\n        }\n        /** @type {?} */\n        const a = this.gridster.findItemsWithItem(gridsterItem.$item);\n        /** @type {?} */\n        let i = a.length - 1;\n        /** @type {?} */\n        let itemCollision;\n        /** @type {?} */\n        let makePush = true;\n        /** @type {?} */\n        const b = [];\n        for (; i > -1; i--) {\n            itemCollision = a[i];\n            if (!itemCollision['id']) {\n                itemCollision['id'] = this.generateTempRandomId();\n            }\n            if (itemCollision === this.gridsterItem) {\n                makePush = false;\n                break;\n            }\n            if (!itemCollision.canBeDragged()) {\n                makePush = false;\n                break;\n            }\n            /** @type {?} */\n            const compare = this.pushedItemsTemp.find((/**\n             * @param {?} el\n             * @return {?}\n             */\n            (el) => {\n                return el['id'] === itemCollision['id'];\n            }));\n            if (compare) {\n                makePush = false;\n                break;\n            }\n            if (this.tryPattern[direction][0].call(this, itemCollision, gridsterItem)) {\n                this.pushedItemsOrder.push(itemCollision);\n                b.push(itemCollision);\n            }\n            else if (this.tryPattern[direction][1].call(this, itemCollision, gridsterItem)) {\n                this.pushedItemsOrder.push(itemCollision);\n                b.push(itemCollision);\n            }\n            else if (this.tryPattern[direction][2].call(this, itemCollision, gridsterItem)) {\n                this.pushedItemsOrder.push(itemCollision);\n                b.push(itemCollision);\n            }\n            else if (this.tryPattern[direction][3].call(this, itemCollision, gridsterItem)) {\n                this.pushedItemsOrder.push(itemCollision);\n                b.push(itemCollision);\n            }\n            else {\n                makePush = false;\n                break;\n            }\n        }\n        if (!makePush) {\n            i = this.pushedItemsOrder.lastIndexOf(b[0]);\n            if (i > -1) {\n                /** @type {?} */\n                let j = this.pushedItemsOrder.length - 1;\n                for (; j >= i; j--) {\n                    itemCollision = this.pushedItemsOrder[j];\n                    this.pushedItemsOrder.pop();\n                    this.removeFromTempPushed(itemCollision);\n                    this.removeFromPushedItem(itemCollision);\n                }\n            }\n        }\n        return makePush;\n    }\n    /**\n     * @private\n     * @param {?} gridsterItemCollide\n     * @param {?} gridsterItem\n     * @return {?}\n     */\n    trySouth(gridsterItemCollide, gridsterItem) {\n        if (!this.gridster.$options.pushDirections.south) {\n            return false;\n        }\n        this.addToTempPushed(gridsterItemCollide);\n        gridsterItemCollide.$item.y = gridsterItem.$item.y + gridsterItem.$item.rows;\n        if (this.push(gridsterItemCollide, this.fromNorth)) {\n            gridsterItemCollide.setSize();\n            this.addToPushed(gridsterItemCollide);\n            return true;\n        }\n        else {\n            this.removeFromTempPushed(gridsterItemCollide);\n        }\n        return false;\n    }\n    /**\n     * @private\n     * @param {?} gridsterItemCollide\n     * @param {?} gridsterItem\n     * @return {?}\n     */\n    tryNorth(gridsterItemCollide, gridsterItem) {\n        if (!this.gridster.$options.pushDirections.north) {\n            return false;\n        }\n        this.addToTempPushed(gridsterItemCollide);\n        gridsterItemCollide.$item.y = gridsterItem.$item.y - gridsterItemCollide.$item.rows;\n        if (this.push(gridsterItemCollide, this.fromSouth)) {\n            gridsterItemCollide.setSize();\n            this.addToPushed(gridsterItemCollide);\n            return true;\n        }\n        else {\n            this.removeFromTempPushed(gridsterItemCollide);\n        }\n        return false;\n    }\n    /**\n     * @private\n     * @param {?} gridsterItemCollide\n     * @param {?} gridsterItem\n     * @return {?}\n     */\n    tryEast(gridsterItemCollide, gridsterItem) {\n        if (!this.gridster.$options.pushDirections.east) {\n            return false;\n        }\n        this.addToTempPushed(gridsterItemCollide);\n        gridsterItemCollide.$item.x = gridsterItem.$item.x + gridsterItem.$item.cols;\n        if (this.push(gridsterItemCollide, this.fromWest)) {\n            gridsterItemCollide.setSize();\n            this.addToPushed(gridsterItemCollide);\n            return true;\n        }\n        else {\n            this.removeFromTempPushed(gridsterItemCollide);\n        }\n        return false;\n    }\n    /**\n     * @private\n     * @param {?} gridsterItemCollide\n     * @param {?} gridsterItem\n     * @return {?}\n     */\n    tryWest(gridsterItemCollide, gridsterItem) {\n        if (!this.gridster.$options.pushDirections.west) {\n            return false;\n        }\n        this.addToTempPushed(gridsterItemCollide);\n        gridsterItemCollide.$item.x = gridsterItem.$item.x - gridsterItemCollide.$item.cols;\n        if (this.push(gridsterItemCollide, this.fromEast)) {\n            gridsterItemCollide.setSize();\n            this.addToPushed(gridsterItemCollide);\n            return true;\n        }\n        else {\n            this.removeFromTempPushed(gridsterItemCollide);\n        }\n        return false;\n    }\n    /**\n     * @private\n     * @param {?} gridsterItem\n     * @return {?}\n     */\n    addToTempPushed(gridsterItem) {\n        /** @type {?} */\n        let i = this.pushedItemsTemp.indexOf(gridsterItem);\n        if (i === -1) {\n            i = this.pushedItemsTemp.push(gridsterItem) - 1;\n            this.pushedItemsTempPath[i] = [];\n        }\n        this.pushedItemsTempPath[i].push({ x: gridsterItem.$item.x, y: gridsterItem.$item.y });\n    }\n    /**\n     * @private\n     * @param {?} gridsterItem\n     * @return {?}\n     */\n    removeFromTempPushed(gridsterItem) {\n        /** @type {?} */\n        const i = this.pushedItemsTemp.indexOf(gridsterItem);\n        /** @type {?} */\n        const tempPosition = this.pushedItemsTempPath[i].pop();\n        if (!tempPosition) {\n            return;\n        }\n        gridsterItem.$item.x = tempPosition.x;\n        gridsterItem.$item.y = tempPosition.y;\n        gridsterItem.setSize();\n        if (!this.pushedItemsTempPath[i].length) {\n            this.pushedItemsTemp.splice(i, 1);\n            this.pushedItemsTempPath.splice(i, 1);\n        }\n    }\n    /**\n     * @private\n     * @param {?} gridsterItem\n     * @return {?}\n     */\n    addToPushed(gridsterItem) {\n        if (this.pushedItems.indexOf(gridsterItem) < 0) {\n            this.pushedItems.push(gridsterItem);\n            this.pushedItemsPath.push([{ x: gridsterItem.item.x || 0, y: gridsterItem.item.y || 0 },\n                { x: gridsterItem.$item.x, y: gridsterItem.$item.y }]);\n        }\n        else {\n            /** @type {?} */\n            const i = this.pushedItems.indexOf(gridsterItem);\n            this.pushedItemsPath[i].push({ x: gridsterItem.$item.x, y: gridsterItem.$item.y });\n        }\n    }\n    /**\n     * @private\n     * @param {?} i\n     * @return {?}\n     */\n    removeFromPushed(i) {\n        if (i > -1) {\n            this.pushedItems.splice(i, 1);\n            this.pushedItemsPath.splice(i, 1);\n        }\n    }\n    /**\n     * @private\n     * @param {?} gridsterItem\n     * @return {?}\n     */\n    removeFromPushedItem(gridsterItem) {\n        /** @type {?} */\n        const i = this.pushedItems.indexOf(gridsterItem);\n        if (i > -1) {\n            this.pushedItemsPath[i].pop();\n            if (!this.pushedItemsPath.length) {\n                this.pushedItems.splice(i, 1);\n                this.pushedItemsPath.splice(i, 1);\n            }\n        }\n    }\n    /**\n     * @private\n     * @param {?} pushedItem\n     * @param {?} i\n     * @return {?}\n     */\n    checkPushedItem(pushedItem, i) {\n        /** @type {?} */\n        const path = this.pushedItemsPath[i];\n        /** @type {?} */\n        let j = path.length - 2;\n        /** @type {?} */\n        let lastPosition;\n        /** @type {?} */\n        let x;\n        /** @type {?} */\n        let y;\n        /** @type {?} */\n        let change = false;\n        for (; j > -1; j--) {\n            lastPosition = path[j];\n            x = pushedItem.$item.x;\n            y = pushedItem.$item.y;\n            pushedItem.$item.x = lastPosition.x;\n            pushedItem.$item.y = lastPosition.y;\n            if (!this.gridster.findItemWithItem(pushedItem.$item)) {\n                pushedItem.setSize();\n                path.splice(j + 1, path.length - j - 1);\n                change = true;\n            }\n            else {\n                pushedItem.$item.x = x;\n                pushedItem.$item.y = y;\n            }\n        }\n        if (path.length < 2) {\n            this.removeFromPushed(i);\n        }\n        return change;\n    }\n}\nGridsterPush.decorators = [\n    { type: Injectable }\n];\n/** @nocollapse */\nGridsterPush.ctorParameters = () => [\n    { type: GridsterItemComponentInterface }\n];\nif (false) {\n    /** @type {?} */\n    GridsterPush.prototype.fromSouth;\n    /** @type {?} */\n    GridsterPush.prototype.fromNorth;\n    /** @type {?} */\n    GridsterPush.prototype.fromEast;\n    /** @type {?} */\n    GridsterPush.prototype.fromWest;\n    /**\n     * @type {?}\n     * @private\n     */\n    GridsterPush.prototype.pushedItems;\n    /**\n     * @type {?}\n     * @private\n     */\n    GridsterPush.prototype.pushedItemsTemp;\n    /**\n     * @type {?}\n     * @private\n     */\n    GridsterPush.prototype.pushedItemsTempPath;\n    /**\n     * @type {?}\n     * @private\n     */\n    GridsterPush.prototype.pushedItemsPath;\n    /**\n     * @type {?}\n     * @private\n     */\n    GridsterPush.prototype.gridsterItem;\n    /**\n     * @type {?}\n     * @private\n     */\n    GridsterPush.prototype.gridster;\n    /**\n     * @type {?}\n     * @private\n     */\n    GridsterPush.prototype.pushedItemsOrder;\n    /**\n     * @type {?}\n     * @private\n     */\n    GridsterPush.prototype.tryPattern;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass GridsterDraggable {\n    /**\n     * @param {?} gridsterItem\n     * @param {?} gridster\n     * @param {?} zone\n     */\n    constructor(gridsterItem, gridster, zone) {\n        this.zone = zone;\n        this.collision = false;\n        this.gridsterItem = gridsterItem;\n        this.gridster = gridster;\n        this.lastMouse = {\n            clientX: 0,\n            clientY: 0\n        };\n        this.path = [];\n    }\n    /**\n     * @return {?}\n     */\n    destroy() {\n        if (this.gridster.previewStyle) {\n            this.gridster.previewStyle(true);\n        }\n        delete this.gridsterItem;\n        delete this.gridster;\n        delete this.collision;\n        if (this.mousedown) {\n            this.mousedown();\n            this.touchstart();\n        }\n    }\n    /**\n     * @param {?} e\n     * @return {?}\n     */\n    dragStart(e) {\n        switch (e.which) {\n            case 1:\n                // left mouse button\n                break;\n            case 2:\n            case 3:\n                // right or middle mouse button\n                return;\n        }\n        if (this.gridster.options.draggable && this.gridster.options.draggable.start) {\n            this.gridster.options.draggable.start(this.gridsterItem.item, this.gridsterItem, e);\n        }\n        e.stopPropagation();\n        e.preventDefault();\n        this.dragFunction = this.dragMove.bind(this);\n        this.dragStopFunction = this.dragStop.bind(this);\n        this.zone.runOutsideAngular((/**\n         * @return {?}\n         */\n        () => {\n            this.mousemove = this.gridsterItem.renderer.listen('document', 'mousemove', this.dragFunction);\n            this.touchmove = this.gridster.renderer.listen(this.gridster.el, 'touchmove', this.dragFunction);\n        }));\n        this.mouseup = this.gridsterItem.renderer.listen('document', 'mouseup', this.dragStopFunction);\n        this.mouseleave = this.gridsterItem.renderer.listen('document', 'mouseleave', this.dragStopFunction);\n        this.cancelOnBlur = this.gridsterItem.renderer.listen('window', 'blur', this.dragStopFunction);\n        this.touchend = this.gridsterItem.renderer.listen('document', 'touchend', this.dragStopFunction);\n        this.touchcancel = this.gridsterItem.renderer.listen('document', 'touchcancel', this.dragStopFunction);\n        this.gridsterItem.renderer.addClass(this.gridsterItem.el, 'gridster-item-moving');\n        this.margin = this.gridster.$options.margin;\n        this.offsetLeft = this.gridster.el.scrollLeft - this.gridster.el.offsetLeft;\n        this.offsetTop = this.gridster.el.scrollTop - this.gridster.el.offsetTop;\n        this.left = this.gridsterItem.left - this.margin;\n        this.top = this.gridsterItem.top - this.margin;\n        this.width = this.gridsterItem.width;\n        this.height = this.gridsterItem.height;\n        this.diffLeft = e.clientX + this.offsetLeft - this.margin - this.left;\n        this.diffTop = e.clientY + this.offsetTop - this.margin - this.top;\n        this.gridster.movingItem = this.gridsterItem.$item;\n        this.gridster.previewStyle(true);\n        this.push = new GridsterPush(this.gridsterItem);\n        this.swap = new GridsterSwap(this.gridsterItem);\n        this.gridster.dragInProgress = true;\n        this.gridster.updateGrid();\n        this.path.push({ x: this.gridsterItem.item.x || 0, y: this.gridsterItem.item.y || 0 });\n    }\n    /**\n     * @param {?} e\n     * @return {?}\n     */\n    dragMove(e) {\n        e.stopPropagation();\n        e.preventDefault();\n        GridsterUtils.checkTouchEvent(e);\n        this.offsetLeft = this.gridster.el.scrollLeft - this.gridster.el.offsetLeft;\n        this.offsetTop = this.gridster.el.scrollTop - this.gridster.el.offsetTop;\n        scroll(this.gridster, this.left, this.top, this.width, this.height, e, this.lastMouse, this.calculateItemPositionFromMousePosition.bind(this));\n        this.calculateItemPositionFromMousePosition(e);\n    }\n    /**\n     * @param {?} e\n     * @return {?}\n     */\n    calculateItemPositionFromMousePosition(e) {\n        this.left = e.clientX + this.offsetLeft - this.diffLeft;\n        this.top = e.clientY + this.offsetTop - this.diffTop;\n        this.calculateItemPosition();\n        this.lastMouse.clientX = e.clientX;\n        this.lastMouse.clientY = e.clientY;\n        this.zone.run((/**\n         * @return {?}\n         */\n        () => {\n            this.gridster.updateGrid();\n        }));\n    }\n    /**\n     * @param {?} e\n     * @return {?}\n     */\n    dragStop(e) {\n        e.stopPropagation();\n        e.preventDefault();\n        cancelScroll();\n        this.cancelOnBlur();\n        this.mousemove();\n        this.mouseup();\n        this.mouseleave();\n        this.touchmove();\n        this.touchend();\n        this.touchcancel();\n        this.gridsterItem.renderer.removeClass(this.gridsterItem.el, 'gridster-item-moving');\n        this.gridster.dragInProgress = false;\n        this.gridster.updateGrid();\n        this.path = [];\n        if (this.gridster.options.draggable && this.gridster.options.draggable.stop) {\n            Promise.resolve(this.gridster.options.draggable.stop(this.gridsterItem.item, this.gridsterItem, e))\n                .then(this.makeDrag.bind(this), this.cancelDrag.bind(this));\n        }\n        else {\n            this.makeDrag();\n        }\n        setTimeout((/**\n         * @return {?}\n         */\n        () => {\n            if (this.gridster) {\n                this.gridster.movingItem = null;\n                this.gridster.previewStyle(true);\n            }\n        }));\n    }\n    /**\n     * @return {?}\n     */\n    cancelDrag() {\n        this.gridsterItem.$item.x = this.gridsterItem.item.x || 0;\n        this.gridsterItem.$item.y = this.gridsterItem.item.y || 0;\n        this.gridsterItem.setSize();\n        if (this.push) {\n            this.push.restoreItems();\n        }\n        if (this.swap) {\n            this.swap.restoreSwapItem();\n        }\n        if (this.push) {\n            this.push.destroy();\n            delete this.push;\n        }\n        if (this.swap) {\n            this.swap.destroy();\n            delete this.swap;\n        }\n    }\n    /**\n     * @return {?}\n     */\n    makeDrag() {\n        if (this.gridster.$options.draggable.dropOverItems && this.gridster.options.draggable\n            && this.gridster.options.draggable.dropOverItemsCallback\n            && this.collision && this.collision !== true && this.collision.$item) {\n            this.gridster.options.draggable.dropOverItemsCallback(this.gridsterItem.item, this.collision.item, this.gridster);\n        }\n        this.collision = false;\n        this.gridsterItem.setSize();\n        this.gridsterItem.checkItemChanges(this.gridsterItem.$item, this.gridsterItem.item);\n        if (this.push) {\n            this.push.setPushedItems();\n        }\n        if (this.swap) {\n            this.swap.setSwapItem();\n        }\n        if (this.push) {\n            this.push.destroy();\n            delete this.push;\n        }\n        if (this.swap) {\n            this.swap.destroy();\n            delete this.swap;\n        }\n    }\n    /**\n     * @return {?}\n     */\n    calculateItemPosition() {\n        this.gridster.movingItem = this.gridsterItem.$item;\n        this.positionX = this.gridster.pixelsToPositionX(this.left, Math.round);\n        this.positionY = this.gridster.pixelsToPositionY(this.top, Math.round);\n        this.positionXBackup = this.gridsterItem.$item.x;\n        this.positionYBackup = this.gridsterItem.$item.y;\n        this.gridsterItem.$item.x = this.positionX;\n        if (this.gridster.checkGridCollision(this.gridsterItem.$item)) {\n            this.gridsterItem.$item.x = this.positionXBackup;\n        }\n        this.gridsterItem.$item.y = this.positionY;\n        if (this.gridster.checkGridCollision(this.gridsterItem.$item)) {\n            this.gridsterItem.$item.y = this.positionYBackup;\n        }\n        this.gridster.gridRenderer.setCellPosition(this.gridsterItem.renderer, this.gridsterItem.el, this.left, this.top);\n        if (this.positionXBackup !== this.gridsterItem.$item.x || this.positionYBackup !== this.gridsterItem.$item.y) {\n            /** @type {?} */\n            const lastPosition = this.path[this.path.length - 1];\n            /** @type {?} */\n            let direction = '';\n            if (lastPosition.x < this.gridsterItem.$item.x) {\n                direction = this.push.fromWest;\n            }\n            else if (lastPosition.x > this.gridsterItem.$item.x) {\n                direction = this.push.fromEast;\n            }\n            else if (lastPosition.y < this.gridsterItem.$item.y) {\n                direction = this.push.fromNorth;\n            }\n            else if (lastPosition.y > this.gridsterItem.$item.y) {\n                direction = this.push.fromSouth;\n            }\n            this.push.pushItems(direction, this.gridster.$options.disablePushOnDrag);\n            this.swap.swapItems();\n            this.collision = this.gridster.checkCollision(this.gridsterItem.$item);\n            if (this.collision) {\n                this.gridsterItem.$item.x = this.positionXBackup;\n                this.gridsterItem.$item.y = this.positionYBackup;\n                if (this.gridster.$options.draggable.dropOverItems && this.collision !== true && this.collision.$item) {\n                    this.gridster.movingItem = null;\n                }\n            }\n            else {\n                this.path.push({ x: this.gridsterItem.$item.x, y: this.gridsterItem.$item.y });\n            }\n            this.push.checkPushBack();\n        }\n        this.gridster.previewStyle(true);\n    }\n    /**\n     * @return {?}\n     */\n    toggle() {\n        /** @type {?} */\n        const enableDrag = this.gridsterItem.canBeDragged();\n        if (!this.enabled && enableDrag) {\n            this.enabled = !this.enabled;\n            this.dragStartFunction = this.dragStartDelay.bind(this);\n            this.mousedown = this.gridsterItem.renderer.listen(this.gridsterItem.el, 'mousedown', this.dragStartFunction);\n            this.touchstart = this.gridsterItem.renderer.listen(this.gridsterItem.el, 'touchstart', this.dragStartFunction);\n        }\n        else if (this.enabled && !enableDrag) {\n            this.enabled = !this.enabled;\n            this.mousedown();\n            this.touchstart();\n        }\n    }\n    /**\n     * @param {?} e\n     * @return {?}\n     */\n    dragStartDelay(e) {\n        if (e.target.hasAttribute('class') && e.target.getAttribute('class').split(' ').indexOf('gridster-item-resizable-handler') > -1) {\n            return;\n        }\n        if (GridsterUtils.checkContentClassForEvent(this.gridster, e)) {\n            return;\n        }\n        GridsterUtils.checkTouchEvent(e);\n        if (!this.gridster.$options.draggable.delayStart) {\n            this.dragStart(e);\n            return;\n        }\n        /** @type {?} */\n        const timeout = setTimeout((/**\n         * @return {?}\n         */\n        () => {\n            this.dragStart(e);\n            cancelDrag();\n        }), this.gridster.$options.draggable.delayStart);\n        /** @type {?} */\n        const cancelMouse = this.gridsterItem.renderer.listen('document', 'mouseup', cancelDrag);\n        /** @type {?} */\n        const cancelMouseLeave = this.gridsterItem.renderer.listen('document', 'mouseleave', cancelDrag);\n        /** @type {?} */\n        const cancelOnBlur = this.gridsterItem.renderer.listen('window', 'blur', cancelDrag);\n        /** @type {?} */\n        const cancelTouchMove = this.gridsterItem.renderer.listen('document', 'touchmove', cancelMove);\n        /** @type {?} */\n        const cancelTouchEnd = this.gridsterItem.renderer.listen('document', 'touchend', cancelDrag);\n        /** @type {?} */\n        const cancelTouchCancel = this.gridsterItem.renderer.listen('document', 'touchcancel', cancelDrag);\n        /**\n         * @param {?} eventMove\n         * @return {?}\n         */\n        function cancelMove(eventMove) {\n            GridsterUtils.checkTouchEvent(eventMove);\n            if (Math.abs(eventMove.clientX - e.clientX) > 9 || Math.abs(eventMove.clientY - e.clientY) > 9) {\n                cancelDrag();\n            }\n        }\n        /**\n         * @return {?}\n         */\n        function cancelDrag() {\n            clearTimeout(timeout);\n            cancelOnBlur();\n            cancelMouse();\n            cancelMouseLeave();\n            cancelTouchMove();\n            cancelTouchEnd();\n            cancelTouchCancel();\n        }\n    }\n}\nGridsterDraggable.decorators = [\n    { type: Injectable }\n];\n/** @nocollapse */\nGridsterDraggable.ctorParameters = () => [\n    { type: GridsterItemComponentInterface },\n    { type: GridsterComponentInterface },\n    { type: NgZone }\n];\nif (false) {\n    /** @type {?} */\n    GridsterDraggable.prototype.gridsterItem;\n    /** @type {?} */\n    GridsterDraggable.prototype.gridster;\n    /** @type {?} */\n    GridsterDraggable.prototype.lastMouse;\n    /** @type {?} */\n    GridsterDraggable.prototype.offsetLeft;\n    /** @type {?} */\n    GridsterDraggable.prototype.offsetTop;\n    /** @type {?} */\n    GridsterDraggable.prototype.margin;\n    /** @type {?} */\n    GridsterDraggable.prototype.diffTop;\n    /** @type {?} */\n    GridsterDraggable.prototype.diffLeft;\n    /** @type {?} */\n    GridsterDraggable.prototype.top;\n    /** @type {?} */\n    GridsterDraggable.prototype.left;\n    /** @type {?} */\n    GridsterDraggable.prototype.height;\n    /** @type {?} */\n    GridsterDraggable.prototype.width;\n    /** @type {?} */\n    GridsterDraggable.prototype.positionX;\n    /** @type {?} */\n    GridsterDraggable.prototype.positionY;\n    /** @type {?} */\n    GridsterDraggable.prototype.positionXBackup;\n    /** @type {?} */\n    GridsterDraggable.prototype.positionYBackup;\n    /** @type {?} */\n    GridsterDraggable.prototype.enabled;\n    /** @type {?} */\n    GridsterDraggable.prototype.dragStartFunction;\n    /** @type {?} */\n    GridsterDraggable.prototype.dragFunction;\n    /** @type {?} */\n    GridsterDraggable.prototype.dragStopFunction;\n    /** @type {?} */\n    GridsterDraggable.prototype.mousemove;\n    /** @type {?} */\n    GridsterDraggable.prototype.mouseup;\n    /** @type {?} */\n    GridsterDraggable.prototype.mouseleave;\n    /** @type {?} */\n    GridsterDraggable.prototype.cancelOnBlur;\n    /** @type {?} */\n    GridsterDraggable.prototype.touchmove;\n    /** @type {?} */\n    GridsterDraggable.prototype.touchend;\n    /** @type {?} */\n    GridsterDraggable.prototype.touchcancel;\n    /** @type {?} */\n    GridsterDraggable.prototype.mousedown;\n    /** @type {?} */\n    GridsterDraggable.prototype.touchstart;\n    /** @type {?} */\n    GridsterDraggable.prototype.push;\n    /** @type {?} */\n    GridsterDraggable.prototype.swap;\n    /** @type {?} */\n    GridsterDraggable.prototype.path;\n    /** @type {?} */\n    GridsterDraggable.prototype.collision;\n    /**\n     * @type {?}\n     * @private\n     */\n    GridsterDraggable.prototype.zone;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass GridsterPushResize {\n    /**\n     * @param {?} gridsterItem\n     */\n    constructor(gridsterItem) {\n        this.pushedItems = [];\n        this.pushedItemsPath = [];\n        this.gridsterItem = gridsterItem;\n        this.gridster = gridsterItem.gridster;\n        this.tryPattern = {\n            fromEast: this.tryWest,\n            fromWest: this.tryEast,\n            fromNorth: this.trySouth,\n            fromSouth: this.tryNorth\n        };\n        this.fromSouth = 'fromSouth';\n        this.fromNorth = 'fromNorth';\n        this.fromEast = 'fromEast';\n        this.fromWest = 'fromWest';\n    }\n    /**\n     * @return {?}\n     */\n    destroy() {\n        delete this.gridster;\n        delete this.gridsterItem;\n    }\n    /**\n     * @param {?} direction\n     * @return {?}\n     */\n    pushItems(direction) {\n        if (this.gridster.$options.pushResizeItems) {\n            return this.push(this.gridsterItem, direction);\n        }\n        else {\n            return false;\n        }\n    }\n    /**\n     * @return {?}\n     */\n    restoreItems() {\n        /** @type {?} */\n        let i = 0;\n        /** @type {?} */\n        const l = this.pushedItems.length;\n        /** @type {?} */\n        let pushedItem;\n        for (; i < l; i++) {\n            pushedItem = this.pushedItems[i];\n            pushedItem.$item.x = pushedItem.item.x || 0;\n            pushedItem.$item.y = pushedItem.item.y || 0;\n            pushedItem.$item.cols = pushedItem.item.cols || 1;\n            pushedItem.$item.row = pushedItem.item.row || 1;\n            pushedItem.setSize();\n        }\n        this.pushedItems = [];\n        this.pushedItemsPath = [];\n    }\n    /**\n     * @return {?}\n     */\n    setPushedItems() {\n        /** @type {?} */\n        let i = 0;\n        /** @type {?} */\n        const l = this.pushedItems.length;\n        /** @type {?} */\n        let pushedItem;\n        for (; i < l; i++) {\n            pushedItem = this.pushedItems[i];\n            pushedItem.checkItemChanges(pushedItem.$item, pushedItem.item);\n        }\n        this.pushedItems = [];\n        this.pushedItemsPath = [];\n    }\n    /**\n     * @return {?}\n     */\n    checkPushBack() {\n        /** @type {?} */\n        let i = this.pushedItems.length - 1;\n        /** @type {?} */\n        let change = false;\n        for (; i > -1; i--) {\n            if (this.checkPushedItem(this.pushedItems[i], i)) {\n                change = true;\n            }\n        }\n        if (change) {\n            this.checkPushBack();\n        }\n    }\n    /**\n     * @private\n     * @param {?} gridsterItem\n     * @param {?} direction\n     * @return {?}\n     */\n    push(gridsterItem, direction) {\n        /** @type {?} */\n        const gridsterItemCollision = this.gridster.checkCollision(gridsterItem.$item);\n        if (gridsterItemCollision && gridsterItemCollision !== true &&\n            gridsterItemCollision !== this.gridsterItem && gridsterItemCollision.canBeResized()) {\n            if (this.tryPattern[direction].call(this, gridsterItemCollision, gridsterItem, direction)) {\n                return true;\n            }\n        }\n        else if (gridsterItemCollision === false) {\n            return true;\n        }\n        return false;\n    }\n    /**\n     * @private\n     * @param {?} gridsterItemCollide\n     * @param {?} gridsterItem\n     * @param {?} direction\n     * @return {?}\n     */\n    trySouth(gridsterItemCollide, gridsterItem, direction) {\n        /** @type {?} */\n        const backUpY = gridsterItemCollide.$item.y;\n        /** @type {?} */\n        const backUpRows = gridsterItemCollide.$item.rows;\n        gridsterItemCollide.$item.y = gridsterItem.$item.y + gridsterItem.$item.rows;\n        gridsterItemCollide.$item.rows = backUpRows + backUpY - gridsterItemCollide.$item.y;\n        if (!GridsterComponent.checkCollisionTwoItems(gridsterItemCollide.$item, gridsterItem.$item)\n            && !this.gridster.checkGridCollision(gridsterItemCollide.$item)) {\n            gridsterItemCollide.setSize();\n            this.addToPushed(gridsterItemCollide);\n            this.push(gridsterItem, direction);\n            return true;\n        }\n        else {\n            gridsterItemCollide.$item.y = backUpY;\n            gridsterItemCollide.$item.rows = backUpRows;\n        }\n        return false;\n    }\n    /**\n     * @private\n     * @param {?} gridsterItemCollide\n     * @param {?} gridsterItem\n     * @param {?} direction\n     * @return {?}\n     */\n    tryNorth(gridsterItemCollide, gridsterItem, direction) {\n        /** @type {?} */\n        const backUpRows = gridsterItemCollide.$item.rows;\n        gridsterItemCollide.$item.rows = gridsterItem.$item.y - gridsterItemCollide.$item.y;\n        if (!GridsterComponent.checkCollisionTwoItems(gridsterItemCollide.$item, gridsterItem.$item)\n            && !this.gridster.checkGridCollision(gridsterItemCollide.$item)) {\n            gridsterItemCollide.setSize();\n            this.addToPushed(gridsterItemCollide);\n            this.push(gridsterItem, direction);\n            return true;\n        }\n        else {\n            gridsterItemCollide.$item.rows = backUpRows;\n        }\n        return false;\n    }\n    /**\n     * @private\n     * @param {?} gridsterItemCollide\n     * @param {?} gridsterItem\n     * @param {?} direction\n     * @return {?}\n     */\n    tryEast(gridsterItemCollide, gridsterItem, direction) {\n        /** @type {?} */\n        const backUpX = gridsterItemCollide.$item.x;\n        /** @type {?} */\n        const backUpCols = gridsterItemCollide.$item.cols;\n        gridsterItemCollide.$item.x = gridsterItem.$item.x + gridsterItem.$item.cols;\n        gridsterItemCollide.$item.cols = backUpCols + backUpX - gridsterItemCollide.$item.x;\n        if (!GridsterComponent.checkCollisionTwoItems(gridsterItemCollide.$item, gridsterItem.$item)\n            && !this.gridster.checkGridCollision(gridsterItemCollide.$item)) {\n            gridsterItemCollide.setSize();\n            this.addToPushed(gridsterItemCollide);\n            this.push(gridsterItem, direction);\n            return true;\n        }\n        else {\n            gridsterItemCollide.$item.x = backUpX;\n            gridsterItemCollide.$item.cols = backUpCols;\n        }\n        return false;\n    }\n    /**\n     * @private\n     * @param {?} gridsterItemCollide\n     * @param {?} gridsterItem\n     * @param {?} direction\n     * @return {?}\n     */\n    tryWest(gridsterItemCollide, gridsterItem, direction) {\n        /** @type {?} */\n        const backUpCols = gridsterItemCollide.$item.cols;\n        gridsterItemCollide.$item.cols = gridsterItem.$item.x - gridsterItemCollide.$item.x;\n        if (!GridsterComponent.checkCollisionTwoItems(gridsterItemCollide.$item, gridsterItem.$item)\n            && !this.gridster.checkGridCollision(gridsterItemCollide.$item)) {\n            gridsterItemCollide.setSize();\n            this.addToPushed(gridsterItemCollide);\n            this.push(gridsterItem, direction);\n            return true;\n        }\n        else {\n            gridsterItemCollide.$item.cols = backUpCols;\n        }\n        return false;\n    }\n    /**\n     * @private\n     * @param {?} gridsterItem\n     * @return {?}\n     */\n    addToPushed(gridsterItem) {\n        if (this.pushedItems.indexOf(gridsterItem) < 0) {\n            this.pushedItems.push(gridsterItem);\n            this.pushedItemsPath.push([\n                {\n                    x: gridsterItem.item.x || 0,\n                    y: gridsterItem.item.y || 0,\n                    cols: gridsterItem.item.cols || 0,\n                    rows: gridsterItem.item.rows || 0\n                },\n                {\n                    x: gridsterItem.$item.x,\n                    y: gridsterItem.$item.y,\n                    cols: gridsterItem.$item.cols,\n                    rows: gridsterItem.$item.rows\n                }\n            ]);\n        }\n        else {\n            /** @type {?} */\n            const i = this.pushedItems.indexOf(gridsterItem);\n            this.pushedItemsPath[i].push({\n                x: gridsterItem.$item.x,\n                y: gridsterItem.$item.y,\n                cols: gridsterItem.$item.cols,\n                rows: gridsterItem.$item.rows\n            });\n        }\n    }\n    /**\n     * @private\n     * @param {?} i\n     * @return {?}\n     */\n    removeFromPushed(i) {\n        if (i > -1) {\n            this.pushedItems.splice(i, 1);\n            this.pushedItemsPath.splice(i, 1);\n        }\n    }\n    /**\n     * @private\n     * @param {?} pushedItem\n     * @param {?} i\n     * @return {?}\n     */\n    checkPushedItem(pushedItem, i) {\n        /** @type {?} */\n        const path = this.pushedItemsPath[i];\n        /** @type {?} */\n        let j = path.length - 2;\n        /** @type {?} */\n        let lastPosition;\n        /** @type {?} */\n        let x;\n        /** @type {?} */\n        let y;\n        /** @type {?} */\n        let cols;\n        /** @type {?} */\n        let rows;\n        for (; j > -1; j--) {\n            lastPosition = path[j];\n            x = pushedItem.$item.x;\n            y = pushedItem.$item.y;\n            cols = pushedItem.$item.cols;\n            rows = pushedItem.$item.rows;\n            pushedItem.$item.x = lastPosition.x;\n            pushedItem.$item.y = lastPosition.y;\n            pushedItem.$item.cols = lastPosition.cols;\n            pushedItem.$item.rows = lastPosition.rows;\n            if (!this.gridster.findItemWithItem(pushedItem.$item)) {\n                pushedItem.setSize();\n                path.splice(j + 1, path.length - 1 - j);\n            }\n            else {\n                pushedItem.$item.x = x;\n                pushedItem.$item.y = y;\n                pushedItem.$item.cols = cols;\n                pushedItem.$item.rows = rows;\n            }\n        }\n        if (path.length < 2) {\n            this.removeFromPushed(i);\n            return true;\n        }\n        return false;\n    }\n}\nGridsterPushResize.decorators = [\n    { type: Injectable }\n];\n/** @nocollapse */\nGridsterPushResize.ctorParameters = () => [\n    { type: GridsterItemComponentInterface }\n];\nif (false) {\n    /** @type {?} */\n    GridsterPushResize.prototype.fromSouth;\n    /** @type {?} */\n    GridsterPushResize.prototype.fromNorth;\n    /** @type {?} */\n    GridsterPushResize.prototype.fromEast;\n    /** @type {?} */\n    GridsterPushResize.prototype.fromWest;\n    /**\n     * @type {?}\n     * @private\n     */\n    GridsterPushResize.prototype.pushedItems;\n    /**\n     * @type {?}\n     * @private\n     */\n    GridsterPushResize.prototype.pushedItemsPath;\n    /**\n     * @type {?}\n     * @private\n     */\n    GridsterPushResize.prototype.gridsterItem;\n    /**\n     * @type {?}\n     * @private\n     */\n    GridsterPushResize.prototype.gridster;\n    /**\n     * @type {?}\n     * @private\n     */\n    GridsterPushResize.prototype.tryPattern;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass GridsterResizable {\n    /**\n     * @param {?} gridsterItem\n     * @param {?} gridster\n     * @param {?} zone\n     */\n    constructor(gridsterItem, gridster, zone) {\n        this.zone = zone;\n        this.gridsterItem = gridsterItem;\n        this.gridster = gridster;\n        this.lastMouse = {\n            clientX: 0,\n            clientY: 0\n        };\n        this.itemBackup = [0, 0, 0, 0];\n        this.resizeEventScrollType = { w: false, e: false, n: false, s: false };\n    }\n    /**\n     * @return {?}\n     */\n    destroy() {\n        if (this.gridster.previewStyle) {\n            this.gridster.previewStyle();\n        }\n        delete this.gridsterItem;\n        delete this.gridster;\n    }\n    /**\n     * @param {?} e\n     * @return {?}\n     */\n    dragStart(e) {\n        switch (e.which) {\n            case 1:\n                // left mouse button\n                break;\n            case 2:\n            case 3:\n                // right or middle mouse button\n                return;\n        }\n        if (this.gridster.options.resizable && this.gridster.options.resizable.start) {\n            this.gridster.options.resizable.start(this.gridsterItem.item, this.gridsterItem, e);\n        }\n        e.stopPropagation();\n        e.preventDefault();\n        this.dragFunction = this.dragMove.bind(this);\n        this.dragStopFunction = this.dragStop.bind(this);\n        this.zone.runOutsideAngular((/**\n         * @return {?}\n         */\n        () => {\n            this.mousemove = this.gridsterItem.renderer.listen('document', 'mousemove', this.dragFunction);\n            this.touchmove = this.gridster.renderer.listen(this.gridster.el, 'touchmove', this.dragFunction);\n        }));\n        this.mouseup = this.gridsterItem.renderer.listen('document', 'mouseup', this.dragStopFunction);\n        this.mouseleave = this.gridsterItem.renderer.listen('document', 'mouseleave', this.dragStopFunction);\n        this.cancelOnBlur = this.gridsterItem.renderer.listen('window', 'blur', this.dragStopFunction);\n        this.touchend = this.gridsterItem.renderer.listen('document', 'touchend', this.dragStopFunction);\n        this.touchcancel = this.gridsterItem.renderer.listen('document', 'touchcancel', this.dragStopFunction);\n        this.gridsterItem.renderer.addClass(this.gridsterItem.el, 'gridster-item-resizing');\n        this.lastMouse.clientX = e.clientX;\n        this.lastMouse.clientY = e.clientY;\n        this.left = this.gridsterItem.left;\n        this.top = this.gridsterItem.top;\n        this.width = this.gridsterItem.width;\n        this.height = this.gridsterItem.height;\n        this.bottom = this.gridsterItem.top + this.gridsterItem.height;\n        this.right = this.gridsterItem.left + this.gridsterItem.width;\n        this.margin = this.gridster.$options.margin;\n        this.offsetLeft = this.gridster.el.scrollLeft - this.gridster.el.offsetLeft;\n        this.offsetTop = this.gridster.el.scrollTop - this.gridster.el.offsetTop;\n        this.diffLeft = e.clientX + this.offsetLeft - this.left;\n        this.diffRight = e.clientX + this.offsetLeft - this.right;\n        this.diffTop = e.clientY + this.offsetTop - this.top;\n        this.diffBottom = e.clientY + this.offsetTop - this.bottom;\n        this.minHeight = this.gridster.positionYToPixels(this.gridsterItem.$item.minItemRows || this.gridster.$options.minItemRows)\n            - this.margin;\n        this.minWidth = this.gridster.positionXToPixels(this.gridsterItem.$item.minItemCols || this.gridster.$options.minItemCols)\n            - this.margin;\n        this.gridster.movingItem = this.gridsterItem.$item;\n        this.gridster.previewStyle();\n        this.push = new GridsterPush(this.gridsterItem);\n        this.pushResize = new GridsterPushResize(this.gridsterItem);\n        this.gridster.dragInProgress = true;\n        this.gridster.updateGrid();\n        if (e.target.hasAttribute('class') && e.target.getAttribute('class').split(' ').indexOf('handle-n') > -1) {\n            this.resizeEventScrollType.n = true;\n            this.directionFunction = this.handleN;\n        }\n        else if (e.target.hasAttribute('class') && e.target.getAttribute('class').split(' ').indexOf('handle-w') > -1) {\n            this.resizeEventScrollType.w = true;\n            this.directionFunction = this.handleW;\n        }\n        else if (e.target.hasAttribute('class') && e.target.getAttribute('class').split(' ').indexOf('handle-s') > -1) {\n            this.resizeEventScrollType.s = true;\n            this.directionFunction = this.handleS;\n        }\n        else if (e.target.hasAttribute('class') && e.target.getAttribute('class').split(' ').indexOf('handle-e') > -1) {\n            this.resizeEventScrollType.e = true;\n            this.directionFunction = this.handleE;\n        }\n        else if (e.target.hasAttribute('class') && e.target.getAttribute('class').split(' ').indexOf('handle-nw') > -1) {\n            this.resizeEventScrollType.n = true;\n            this.resizeEventScrollType.w = true;\n            this.directionFunction = this.handleNW;\n        }\n        else if (e.target.hasAttribute('class') && e.target.getAttribute('class').split(' ').indexOf('handle-ne') > -1) {\n            this.resizeEventScrollType.n = true;\n            this.resizeEventScrollType.e = true;\n            this.directionFunction = this.handleNE;\n        }\n        else if (e.target.hasAttribute('class') && e.target.getAttribute('class').split(' ').indexOf('handle-sw') > -1) {\n            this.resizeEventScrollType.s = true;\n            this.resizeEventScrollType.w = true;\n            this.directionFunction = this.handleSW;\n        }\n        else if (e.target.hasAttribute('class') && e.target.getAttribute('class').split(' ').indexOf('handle-se') > -1) {\n            this.resizeEventScrollType.s = true;\n            this.resizeEventScrollType.e = true;\n            this.directionFunction = this.handleSE;\n        }\n    }\n    /**\n     * @param {?} e\n     * @return {?}\n     */\n    dragMove(e) {\n        e.stopPropagation();\n        e.preventDefault();\n        GridsterUtils.checkTouchEvent(e);\n        this.offsetTop = this.gridster.el.scrollTop - this.gridster.el.offsetTop;\n        this.offsetLeft = this.gridster.el.scrollLeft - this.gridster.el.offsetLeft;\n        scroll(this.gridster, this.left, this.top, this.width, this.height, e, this.lastMouse, this.directionFunction.bind(this), true, this.resizeEventScrollType);\n        this.directionFunction(e);\n        this.lastMouse.clientX = e.clientX;\n        this.lastMouse.clientY = e.clientY;\n        this.zone.run((/**\n         * @return {?}\n         */\n        () => {\n            this.gridster.updateGrid();\n        }));\n    }\n    /**\n     * @param {?} e\n     * @return {?}\n     */\n    dragStop(e) {\n        e.stopPropagation();\n        e.preventDefault();\n        cancelScroll();\n        this.mousemove();\n        this.mouseup();\n        this.mouseleave();\n        this.cancelOnBlur();\n        this.touchmove();\n        this.touchend();\n        this.touchcancel();\n        this.gridster.dragInProgress = false;\n        this.gridster.updateGrid();\n        if (this.gridster.options.resizable && this.gridster.options.resizable.stop) {\n            Promise.resolve(this.gridster.options.resizable.stop(this.gridsterItem.item, this.gridsterItem, e))\n                .then(this.makeResize.bind(this), this.cancelResize.bind(this));\n        }\n        else {\n            this.makeResize();\n        }\n        setTimeout((/**\n         * @return {?}\n         */\n        () => {\n            this.gridsterItem.renderer.removeClass(this.gridsterItem.el, 'gridster-item-resizing');\n            if (this.gridster) {\n                this.gridster.movingItem = null;\n                this.gridster.previewStyle();\n            }\n        }));\n    }\n    /**\n     * @return {?}\n     */\n    cancelResize() {\n        this.gridsterItem.$item.cols = this.gridsterItem.item.cols || 1;\n        this.gridsterItem.$item.rows = this.gridsterItem.item.rows || 1;\n        this.gridsterItem.$item.x = this.gridsterItem.item.x || 0;\n        this.gridsterItem.$item.y = this.gridsterItem.item.y || 0;\n        this.gridsterItem.setSize();\n        this.push.restoreItems();\n        this.pushResize.restoreItems();\n        this.push.destroy();\n        delete this.push;\n        this.pushResize.destroy();\n        delete this.pushResize;\n    }\n    /**\n     * @return {?}\n     */\n    makeResize() {\n        this.gridsterItem.setSize();\n        this.gridsterItem.checkItemChanges(this.gridsterItem.$item, this.gridsterItem.item);\n        this.push.setPushedItems();\n        this.pushResize.setPushedItems();\n        this.push.destroy();\n        delete this.push;\n        this.pushResize.destroy();\n        delete this.pushResize;\n    }\n    /**\n     * @param {?} e\n     * @return {?}\n     */\n    handleN(e) {\n        this.top = e.clientY + this.offsetTop - this.diffTop;\n        this.height = this.bottom - this.top;\n        if (this.minHeight > this.height) {\n            this.height = this.minHeight;\n            this.top = this.bottom - this.minHeight;\n        }\n        this.newPosition = this.gridster.pixelsToPositionY(this.top + this.margin, Math.floor);\n        if (this.gridsterItem.$item.y !== this.newPosition) {\n            this.itemBackup[1] = this.gridsterItem.$item.y;\n            this.itemBackup[3] = this.gridsterItem.$item.rows;\n            this.gridsterItem.$item.rows += this.gridsterItem.$item.y - this.newPosition;\n            this.gridsterItem.$item.y = this.newPosition;\n            this.pushResize.pushItems(this.pushResize.fromSouth);\n            this.push.pushItems(this.push.fromSouth, this.gridster.$options.disablePushOnResize);\n            if (this.gridster.checkCollision(this.gridsterItem.$item)) {\n                this.gridsterItem.$item.y = this.itemBackup[1];\n                this.gridsterItem.$item.rows = this.itemBackup[3];\n                this.setItemTop(this.gridster.positionYToPixels(this.gridsterItem.$item.y));\n                this.setItemHeight(this.gridster.positionYToPixels(this.gridsterItem.$item.rows) - this.margin);\n                return;\n            }\n            else {\n                this.gridster.previewStyle();\n            }\n            this.pushResize.checkPushBack();\n            this.push.checkPushBack();\n        }\n        this.setItemTop(this.top);\n        this.setItemHeight(this.height);\n    }\n    /**\n     * @param {?} e\n     * @return {?}\n     */\n    handleW(e) {\n        this.left = e.clientX + this.offsetLeft - this.diffLeft;\n        this.width = this.right - this.left;\n        if (this.minWidth > this.width) {\n            this.width = this.minWidth;\n            this.left = this.right - this.minWidth;\n        }\n        this.newPosition = this.gridster.pixelsToPositionX(this.left + this.margin, Math.floor);\n        if (this.gridsterItem.$item.x !== this.newPosition) {\n            this.itemBackup[0] = this.gridsterItem.$item.x;\n            this.itemBackup[2] = this.gridsterItem.$item.cols;\n            this.gridsterItem.$item.cols += this.gridsterItem.$item.x - this.newPosition;\n            this.gridsterItem.$item.x = this.newPosition;\n            this.pushResize.pushItems(this.pushResize.fromEast);\n            this.push.pushItems(this.push.fromEast, this.gridster.$options.disablePushOnResize);\n            if (this.gridster.checkCollision(this.gridsterItem.$item)) {\n                this.gridsterItem.$item.x = this.itemBackup[0];\n                this.gridsterItem.$item.cols = this.itemBackup[2];\n                this.setItemLeft(this.gridster.positionXToPixels(this.gridsterItem.$item.x));\n                this.setItemWidth(this.gridster.positionXToPixels(this.gridsterItem.$item.cols) - this.margin);\n                return;\n            }\n            else {\n                this.gridster.previewStyle();\n            }\n            this.pushResize.checkPushBack();\n            this.push.checkPushBack();\n        }\n        this.setItemLeft(this.left);\n        this.setItemWidth(this.width);\n    }\n    /**\n     * @param {?} e\n     * @return {?}\n     */\n    handleS(e) {\n        this.height = e.clientY + this.offsetTop - this.diffBottom - this.top;\n        if (this.minHeight > this.height) {\n            this.height = this.minHeight;\n        }\n        this.bottom = this.top + this.height;\n        this.newPosition = this.gridster.pixelsToPositionY(this.bottom, Math.ceil);\n        if ((this.gridsterItem.$item.y + this.gridsterItem.$item.rows) !== this.newPosition) {\n            this.itemBackup[3] = this.gridsterItem.$item.rows;\n            this.gridsterItem.$item.rows = this.newPosition - this.gridsterItem.$item.y;\n            this.pushResize.pushItems(this.pushResize.fromNorth);\n            this.push.pushItems(this.push.fromNorth, this.gridster.$options.disablePushOnResize);\n            if (this.gridster.checkCollision(this.gridsterItem.$item)) {\n                this.gridsterItem.$item.rows = this.itemBackup[3];\n                this.setItemHeight(this.gridster.positionYToPixels(this.gridsterItem.$item.rows) - this.margin);\n                return;\n            }\n            else {\n                this.gridster.previewStyle();\n            }\n            this.pushResize.checkPushBack();\n            this.push.checkPushBack();\n        }\n        this.setItemHeight(this.height);\n    }\n    /**\n     * @param {?} e\n     * @return {?}\n     */\n    handleE(e) {\n        this.width = e.clientX + this.offsetLeft - this.diffRight - this.left;\n        if (this.minWidth > this.width) {\n            this.width = this.minWidth;\n        }\n        this.right = this.left + this.width;\n        this.newPosition = this.gridster.pixelsToPositionX(this.right, Math.ceil);\n        if ((this.gridsterItem.$item.x + this.gridsterItem.$item.cols) !== this.newPosition) {\n            this.itemBackup[2] = this.gridsterItem.$item.cols;\n            this.gridsterItem.$item.cols = this.newPosition - this.gridsterItem.$item.x;\n            this.pushResize.pushItems(this.pushResize.fromWest);\n            this.push.pushItems(this.push.fromWest, this.gridster.$options.disablePushOnResize);\n            if (this.gridster.checkCollision(this.gridsterItem.$item)) {\n                this.gridsterItem.$item.cols = this.itemBackup[2];\n                this.setItemWidth(this.gridster.positionXToPixels(this.gridsterItem.$item.cols) - this.margin);\n                return;\n            }\n            else {\n                this.gridster.previewStyle();\n            }\n            this.pushResize.checkPushBack();\n            this.push.checkPushBack();\n        }\n        this.setItemWidth(this.width);\n    }\n    /**\n     * @param {?} e\n     * @return {?}\n     */\n    handleNW(e) {\n        this.handleN(e);\n        this.handleW(e);\n    }\n    /**\n     * @param {?} e\n     * @return {?}\n     */\n    handleNE(e) {\n        this.handleN(e);\n        this.handleE(e);\n    }\n    /**\n     * @param {?} e\n     * @return {?}\n     */\n    handleSW(e) {\n        this.handleS(e);\n        this.handleW(e);\n    }\n    /**\n     * @param {?} e\n     * @return {?}\n     */\n    handleSE(e) {\n        this.handleS(e);\n        this.handleE(e);\n    }\n    /**\n     * @return {?}\n     */\n    toggle() {\n        this.resizeEnabled = this.gridsterItem.canBeResized();\n    }\n    /**\n     * @param {?} e\n     * @return {?}\n     */\n    dragStartDelay(e) {\n        GridsterUtils.checkTouchEvent(e);\n        if (!this.gridster.$options.resizable.delayStart) {\n            this.dragStart(e);\n            return;\n        }\n        /** @type {?} */\n        const timeout = setTimeout((/**\n         * @return {?}\n         */\n        () => {\n            this.dragStart(e);\n            cancelDrag();\n        }), this.gridster.$options.resizable.delayStart);\n        /** @type {?} */\n        const cancelMouse = this.gridsterItem.renderer.listen('document', 'mouseup', cancelDrag);\n        /** @type {?} */\n        const cancelMouseLeave = this.gridsterItem.renderer.listen('document', 'mouseleave', cancelDrag);\n        /** @type {?} */\n        const cancelOnBlur = this.gridsterItem.renderer.listen('window', 'blur', cancelDrag);\n        /** @type {?} */\n        const cancelTouchMove = this.gridsterItem.renderer.listen('document', 'touchmove', cancelMove);\n        /** @type {?} */\n        const cancelTouchEnd = this.gridsterItem.renderer.listen('document', 'touchend', cancelDrag);\n        /** @type {?} */\n        const cancelTouchCancel = this.gridsterItem.renderer.listen('document', 'touchcancel', cancelDrag);\n        /**\n         * @param {?} eventMove\n         * @return {?}\n         */\n        function cancelMove(eventMove) {\n            GridsterUtils.checkTouchEvent(eventMove);\n            if (Math.abs(eventMove.clientX - e.clientX) > 9 || Math.abs(eventMove.clientY - e.clientY) > 9) {\n                cancelDrag();\n            }\n        }\n        /**\n         * @return {?}\n         */\n        function cancelDrag() {\n            clearTimeout(timeout);\n            cancelOnBlur();\n            cancelMouse();\n            cancelMouseLeave();\n            cancelTouchMove();\n            cancelTouchEnd();\n            cancelTouchCancel();\n        }\n    }\n    /**\n     * @param {?} top\n     * @return {?}\n     */\n    setItemTop(top) {\n        this.gridster.gridRenderer.setCellPosition(this.gridsterItem.renderer, this.gridsterItem.el, this.left, top);\n    }\n    /**\n     * @param {?} left\n     * @return {?}\n     */\n    setItemLeft(left) {\n        this.gridster.gridRenderer.setCellPosition(this.gridsterItem.renderer, this.gridsterItem.el, left, this.top);\n    }\n    /**\n     * @param {?} height\n     * @return {?}\n     */\n    setItemHeight(height) {\n        this.gridsterItem.renderer.setStyle(this.gridsterItem.el, 'height', height + 'px');\n    }\n    /**\n     * @param {?} width\n     * @return {?}\n     */\n    setItemWidth(width) {\n        this.gridsterItem.renderer.setStyle(this.gridsterItem.el, 'width', width + 'px');\n    }\n}\nGridsterResizable.decorators = [\n    { type: Injectable }\n];\n/** @nocollapse */\nGridsterResizable.ctorParameters = () => [\n    { type: GridsterItemComponentInterface },\n    { type: GridsterComponentInterface },\n    { type: NgZone }\n];\nif (false) {\n    /** @type {?} */\n    GridsterResizable.prototype.gridsterItem;\n    /** @type {?} */\n    GridsterResizable.prototype.gridster;\n    /** @type {?} */\n    GridsterResizable.prototype.lastMouse;\n    /** @type {?} */\n    GridsterResizable.prototype.itemBackup;\n    /** @type {?} */\n    GridsterResizable.prototype.resizeEventScrollType;\n    /** @type {?} */\n    GridsterResizable.prototype.directionFunction;\n    /** @type {?} */\n    GridsterResizable.prototype.dragFunction;\n    /** @type {?} */\n    GridsterResizable.prototype.dragStopFunction;\n    /** @type {?} */\n    GridsterResizable.prototype.resizeEnabled;\n    /** @type {?} */\n    GridsterResizable.prototype.mousemove;\n    /** @type {?} */\n    GridsterResizable.prototype.mouseup;\n    /** @type {?} */\n    GridsterResizable.prototype.mouseleave;\n    /** @type {?} */\n    GridsterResizable.prototype.cancelOnBlur;\n    /** @type {?} */\n    GridsterResizable.prototype.touchmove;\n    /** @type {?} */\n    GridsterResizable.prototype.touchend;\n    /** @type {?} */\n    GridsterResizable.prototype.touchcancel;\n    /** @type {?} */\n    GridsterResizable.prototype.push;\n    /** @type {?} */\n    GridsterResizable.prototype.pushResize;\n    /** @type {?} */\n    GridsterResizable.prototype.minHeight;\n    /** @type {?} */\n    GridsterResizable.prototype.minWidth;\n    /** @type {?} */\n    GridsterResizable.prototype.offsetTop;\n    /** @type {?} */\n    GridsterResizable.prototype.offsetLeft;\n    /** @type {?} */\n    GridsterResizable.prototype.diffTop;\n    /** @type {?} */\n    GridsterResizable.prototype.diffLeft;\n    /** @type {?} */\n    GridsterResizable.prototype.diffRight;\n    /** @type {?} */\n    GridsterResizable.prototype.diffBottom;\n    /** @type {?} */\n    GridsterResizable.prototype.margin;\n    /** @type {?} */\n    GridsterResizable.prototype.top;\n    /** @type {?} */\n    GridsterResizable.prototype.left;\n    /** @type {?} */\n    GridsterResizable.prototype.bottom;\n    /** @type {?} */\n    GridsterResizable.prototype.right;\n    /** @type {?} */\n    GridsterResizable.prototype.width;\n    /** @type {?} */\n    GridsterResizable.prototype.height;\n    /** @type {?} */\n    GridsterResizable.prototype.newPosition;\n    /**\n     * @type {?}\n     * @private\n     */\n    GridsterResizable.prototype.zone;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass GridsterItemComponent {\n    /**\n     * @param {?} el\n     * @param {?} gridster\n     * @param {?} renderer\n     * @param {?} zone\n     */\n    constructor(el, gridster, renderer, zone) {\n        this.renderer = renderer;\n        this.zone = zone;\n        this.el = el.nativeElement;\n        this.$item = {\n            cols: -1,\n            rows: -1,\n            x: -1,\n            y: -1,\n        };\n        this.gridster = gridster;\n        this.drag = new GridsterDraggable(this, gridster, this.zone);\n        this.resize = new GridsterResizable(this, gridster, this.zone);\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        this.updateOptions();\n        this.gridster.addItem(this);\n    }\n    /**\n     * @return {?}\n     */\n    updateOptions() {\n        this.$item = GridsterUtils.merge(this.$item, this.item, {\n            cols: undefined,\n            rows: undefined,\n            x: undefined,\n            y: undefined,\n            dragEnabled: undefined,\n            resizeEnabled: undefined,\n            compactEnabled: undefined,\n            maxItemRows: undefined,\n            minItemRows: undefined,\n            maxItemCols: undefined,\n            minItemCols: undefined,\n            maxItemArea: undefined,\n            minItemArea: undefined,\n        });\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this.gridster.removeItem(this);\n        delete this.gridster;\n        this.drag.destroy();\n        delete this.drag;\n        this.resize.destroy();\n        delete this.resize;\n    }\n    /**\n     * @return {?}\n     */\n    setSize() {\n        this.renderer.setStyle(this.el, 'display', this.notPlaced ? '' : 'block');\n        this.gridster.gridRenderer.updateItem(this.el, this.$item, this.renderer);\n        this.updateItemSize();\n    }\n    /**\n     * @return {?}\n     */\n    updateItemSize() {\n        /** @type {?} */\n        const top = this.$item.y * this.gridster.curRowHeight;\n        /** @type {?} */\n        const left = this.$item.x * this.gridster.curColWidth;\n        /** @type {?} */\n        const width = this.$item.cols * this.gridster.curColWidth - this.gridster.$options.margin;\n        /** @type {?} */\n        const height = this.$item.rows * this.gridster.curRowHeight - this.gridster.$options.margin;\n        if (!this.init && width > 0 && height > 0) {\n            this.init = true;\n            if (this.item.initCallback) {\n                this.item.initCallback(this.item, this);\n            }\n            if (this.gridster.options.itemInitCallback) {\n                this.gridster.options.itemInitCallback(this.item, this);\n            }\n            if (this.gridster.$options.scrollToNewItems) {\n                this.el.scrollIntoView(false);\n            }\n        }\n        if (width !== this.width || height !== this.height) {\n            this.width = width;\n            this.height = height;\n            if (this.gridster.options.itemResizeCallback) {\n                this.gridster.options.itemResizeCallback(this.item, this);\n            }\n        }\n        this.top = top;\n        this.left = left;\n    }\n    /**\n     * @return {?}\n     */\n    itemChanged() {\n        if (this.gridster.options.itemChangeCallback) {\n            this.gridster.options.itemChangeCallback(this.item, this);\n        }\n    }\n    /**\n     * @param {?} newValue\n     * @param {?} oldValue\n     * @return {?}\n     */\n    checkItemChanges(newValue, oldValue) {\n        if (newValue.rows === oldValue.rows && newValue.cols === oldValue.cols && newValue.x === oldValue.x && newValue.y === oldValue.y) {\n            return;\n        }\n        if (this.gridster.checkCollision(this.$item)) {\n            this.$item.x = oldValue.x || 0;\n            this.$item.y = oldValue.y || 0;\n            this.$item.cols = oldValue.cols || 1;\n            this.$item.rows = oldValue.rows || 1;\n            this.setSize();\n        }\n        else {\n            this.item.cols = this.$item.cols;\n            this.item.rows = this.$item.rows;\n            this.item.x = this.$item.x;\n            this.item.y = this.$item.y;\n            this.gridster.calculateLayoutDebounce();\n            this.itemChanged();\n        }\n    }\n    /**\n     * @return {?}\n     */\n    canBeDragged() {\n        return !this.gridster.mobile &&\n            (this.$item.dragEnabled === undefined ? this.gridster.$options.draggable.enabled : this.$item.dragEnabled);\n    }\n    /**\n     * @return {?}\n     */\n    canBeResized() {\n        return !this.gridster.mobile &&\n            (this.$item.resizeEnabled === undefined ? this.gridster.$options.resizable.enabled : this.$item.resizeEnabled);\n    }\n}\nGridsterItemComponent.decorators = [\n    { type: Component, args: [{\n                selector: 'gridster-item',\n                template: \"<ng-content></ng-content>\\n<div (mousedown)=\\\"resize.dragStartDelay($event)\\\" (touchstart)=\\\"resize.dragStartDelay($event)\\\"\\n     *ngIf=\\\"gridster.$options.resizable.handles.s && resize.resizeEnabled\\\"\\n     class=\\\"gridster-item-resizable-handler handle-s\\\"></div>\\n<div (mousedown)=\\\"resize.dragStartDelay($event)\\\" (touchstart)=\\\"resize.dragStartDelay($event)\\\"\\n     *ngIf=\\\"gridster.$options.resizable.handles.e && resize.resizeEnabled\\\"\\n     class=\\\"gridster-item-resizable-handler handle-e\\\"></div>\\n<div (mousedown)=\\\"resize.dragStartDelay($event)\\\" (touchstart)=\\\"resize.dragStartDelay($event)\\\"\\n     *ngIf=\\\"gridster.$options.resizable.handles.n && resize.resizeEnabled\\\"\\n     class=\\\"gridster-item-resizable-handler handle-n\\\"></div>\\n<div (mousedown)=\\\"resize.dragStartDelay($event)\\\" (touchstart)=\\\"resize.dragStartDelay($event)\\\"\\n     *ngIf=\\\"gridster.$options.resizable.handles.w && resize.resizeEnabled\\\"\\n     class=\\\"gridster-item-resizable-handler handle-w\\\"></div>\\n<div (mousedown)=\\\"resize.dragStartDelay($event)\\\" (touchstart)=\\\"resize.dragStartDelay($event)\\\"\\n     *ngIf=\\\"gridster.$options.resizable.handles.se && resize.resizeEnabled\\\"\\n     class=\\\"gridster-item-resizable-handler handle-se\\\"></div>\\n<div (mousedown)=\\\"resize.dragStartDelay($event)\\\" (touchstart)=\\\"resize.dragStartDelay($event)\\\"\\n     *ngIf=\\\"gridster.$options.resizable.handles.ne && resize.resizeEnabled\\\"\\n     class=\\\"gridster-item-resizable-handler handle-ne\\\"></div>\\n<div (mousedown)=\\\"resize.dragStartDelay($event)\\\" (touchstart)=\\\"resize.dragStartDelay($event)\\\"\\n     *ngIf=\\\"gridster.$options.resizable.handles.sw && resize.resizeEnabled\\\"\\n     class=\\\"gridster-item-resizable-handler handle-sw\\\"></div>\\n<div (mousedown)=\\\"resize.dragStartDelay($event)\\\" (touchstart)=\\\"resize.dragStartDelay($event)\\\"\\n     *ngIf=\\\"gridster.$options.resizable.handles.nw && resize.resizeEnabled\\\"\\n     class=\\\"gridster-item-resizable-handler handle-nw\\\"></div>\\n\",\n                encapsulation: ViewEncapsulation.None,\n                styles: [\"gridster-item{box-sizing:border-box;z-index:1;position:absolute;overflow:hidden;transition:.3s;display:none;background:#fff;-webkit-user-select:text;-moz-user-select:text;-ms-user-select:text;user-select:text}gridster-item.gridster-item-moving{cursor:move}gridster-item.gridster-item-moving,gridster-item.gridster-item-resizing{transition:none;z-index:2;box-shadow:0 0 5px 5px rgba(0,0,0,.2),0 6px 10px 0 rgba(0,0,0,.14),0 1px 18px 0 rgba(0,0,0,.12)}.gridster-item-resizable-handler{position:absolute;z-index:2}.gridster-item-resizable-handler.handle-n{cursor:n-resize;height:10px;right:0;top:0;left:0}.gridster-item-resizable-handler.handle-e{cursor:e-resize;width:10px;bottom:0;right:0;top:0}.gridster-item-resizable-handler.handle-s{cursor:s-resize;height:10px;right:0;bottom:0;left:0}.gridster-item-resizable-handler.handle-w{cursor:w-resize;width:10px;left:0;top:0;bottom:0}.gridster-item-resizable-handler.handle-ne{cursor:ne-resize;width:10px;height:10px;right:0;top:0}.gridster-item-resizable-handler.handle-nw{cursor:nw-resize;width:10px;height:10px;left:0;top:0}.gridster-item-resizable-handler.handle-se{cursor:se-resize;width:0;height:0;right:0;bottom:0;border-style:solid;border-width:0 0 10px 10px;border-color:transparent}.gridster-item-resizable-handler.handle-sw{cursor:sw-resize;width:10px;height:10px;left:0;bottom:0}gridster-item:hover .gridster-item-resizable-handler.handle-se{border-color:transparent transparent #ccc}\"]\n            }] }\n];\n/** @nocollapse */\nGridsterItemComponent.ctorParameters = () => [\n    { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] },\n    { type: GridsterComponent },\n    { type: Renderer2, decorators: [{ type: Inject, args: [Renderer2,] }] },\n    { type: NgZone, decorators: [{ type: Inject, args: [NgZone,] }] }\n];\nGridsterItemComponent.propDecorators = {\n    item: [{ type: Input }]\n};\nif (false) {\n    /** @type {?} */\n    GridsterItemComponent.prototype.item;\n    /** @type {?} */\n    GridsterItemComponent.prototype.$item;\n    /** @type {?} */\n    GridsterItemComponent.prototype.el;\n    /** @type {?} */\n    GridsterItemComponent.prototype.gridster;\n    /** @type {?} */\n    GridsterItemComponent.prototype.top;\n    /** @type {?} */\n    GridsterItemComponent.prototype.left;\n    /** @type {?} */\n    GridsterItemComponent.prototype.width;\n    /** @type {?} */\n    GridsterItemComponent.prototype.height;\n    /** @type {?} */\n    GridsterItemComponent.prototype.drag;\n    /** @type {?} */\n    GridsterItemComponent.prototype.resize;\n    /** @type {?} */\n    GridsterItemComponent.prototype.notPlaced;\n    /** @type {?} */\n    GridsterItemComponent.prototype.init;\n    /** @type {?} */\n    GridsterItemComponent.prototype.renderer;\n    /**\n     * @type {?}\n     * @private\n     */\n    GridsterItemComponent.prototype.zone;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass GridsterPreviewComponent {\n    /**\n     * @param {?} el\n     * @param {?} gridster\n     * @param {?} renderer\n     */\n    constructor(el, gridster, renderer) {\n        this.renderer = renderer;\n        this.el = el.nativeElement;\n        this.gridster = gridster;\n        this.gridster.previewStyle = this.previewStyle.bind(this);\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        delete this.el;\n        delete this.gridster.previewStyle;\n        delete this.gridster;\n    }\n    /**\n     * @param {?=} drag\n     * @return {?}\n     */\n    previewStyle(drag) {\n        if (!this.gridster.movingItem) {\n            this.renderer.setStyle(this.el, 'display', '');\n        }\n        else {\n            if (this.gridster.compact && drag) {\n                this.gridster.compact.checkCompactItem(this.gridster.movingItem);\n            }\n            this.renderer.setStyle(this.el, 'display', 'block');\n            this.gridster.gridRenderer.updateItem(this.el, this.gridster.movingItem, this.renderer);\n        }\n    }\n}\nGridsterPreviewComponent.decorators = [\n    { type: Component, args: [{\n                selector: 'gridster-preview',\n                template: '',\n                encapsulation: ViewEncapsulation.None,\n                styles: [\"gridster-preview{position:absolute;display:none;background:rgba(0,0,0,.15)}\"]\n            }] }\n];\n/** @nocollapse */\nGridsterPreviewComponent.ctorParameters = () => [\n    { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] },\n    { type: GridsterComponent },\n    { type: Renderer2, decorators: [{ type: Inject, args: [Renderer2,] }] }\n];\nif (false) {\n    /** @type {?} */\n    GridsterPreviewComponent.prototype.el;\n    /** @type {?} */\n    GridsterPreviewComponent.prototype.gridster;\n    /** @type {?} */\n    GridsterPreviewComponent.prototype.renderer;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass GridsterModule {\n}\nGridsterModule.decorators = [\n    { type: NgModule, args: [{\n                declarations: [\n                    GridsterComponent,\n                    GridsterItemComponent,\n                    GridsterPreviewComponent\n                ],\n                imports: [\n                    CommonModule\n                ],\n                exports: [GridsterComponent, GridsterItemComponent],\n                providers: [],\n                bootstrap: [],\n                entryComponents: [GridsterComponent, GridsterItemComponent]\n            },] }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { CompactType, DisplayGrid, GridType, GridsterComponent, GridsterComponentInterface, GridsterConfigService, GridsterItemComponent, GridsterItemComponentInterface, GridsterModule, GridsterPush, GridsterPushResize, GridsterSwap, GridsterPreviewComponent as ɵa };\n//# sourceMappingURL=angular-gridster2.js.map\n","module.exports = \"<table class=\\\"full-width\\\" mat-table *ngIf=\\\"tableData.length\\\" [dataSource]=\\\"tableData\\\">\\n  <ng-container matColumnDef=\\\"description\\\">\\n    <th mat-header-cell *matHeaderCellDef>Description</th>\\n    <td mat-cell *matCellDef=\\\"let element\\\"> {{element.description}} </td>\\n  </ng-container>\\n\\n  <ng-container matColumnDef=\\\"number\\\">\\n    <th mat-header-cell *matHeaderCellDef><span class=\\\"fl-float-right\\\">Number</span></th>\\n    <td mat-cell *matCellDef=\\\"let element\\\"><span class=\\\"fl-float-right\\\">{{element.number}}</span></td>\\n  </ng-container>\\n\\n  <tr mat-header-row *matHeaderRowDef=\\\"displayedColumns\\\"></tr>\\n  <tr mat-row *matRowDef=\\\"let row; columns: displayedColumns;\\\"></tr>\\n</table>\\n\"","module.exports = \"<div class=\\\"dashboard-wrapper\\\">\\n<gridster [options]=\\\"options\\\">\\n  <gridster-item [item]=\\\"item\\\" *ngFor=\\\"let item of dashboard\\\" class=\\\"mat-elevation-z3\\\">\\n    <div class=\\\"gridster-item-wrapper\\\">\\n      <div (mousedown)=\\\"$event.stopPropagation()\\\" class=\\\"gridster-item-title\\\">\\n        {{item.title}}\\n      </div>\\n      <div (mousedown)=\\\"$event.stopPropagation()\\\">\\n       <ng-template *ngIf=\\\"item.component\\\" appComponentHost [component]=\\\"item.component\\\"></ng-template>\\n        <span *ngIf=\\\"!item.component\\\">No component defined</span>\\n      </div>\\n      <button class=\\\"remove-gridster-item-btn\\\" mat-icon-button (click)=\\\"removeItem($event, item)\\\"\\n              (mousedown)=\\\"$event.stopPropagation()\\\">\\n       <mat-icon>clear</mat-icon>\\n      </button>\\n    </div>\\n  </gridster-item>\\n</gridster>\\n</div>\\n\"","module.exports = \"<table class=\\\"full-width\\\" mat-table *ngIf=\\\"tableData.length\\\" [dataSource]=\\\"tableData\\\">\\n  <ng-container matColumnDef=\\\"description\\\">\\n    <th mat-header-cell *matHeaderCellDef>Description</th>\\n    <td mat-cell *matCellDef=\\\"let element\\\"> {{element.description}} </td>\\n  </ng-container>\\n\\n  <ng-container matColumnDef=\\\"number\\\">\\n    <th mat-header-cell *matHeaderCellDef><span class=\\\"fl-float-right\\\">Number</span></th>\\n    <td mat-cell *matCellDef=\\\"let element\\\"><span class=\\\"fl-float-right\\\">{{element.number}}</span></td>\\n  </ng-container>\\n\\n  <tr mat-header-row *matHeaderRowDef=\\\"displayedColumns\\\"></tr>\\n  <tr mat-row *matRowDef=\\\"let row; columns: displayedColumns;\\\"></tr>\\n</table>\\n\"","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { DashboardComponent } from './dashboard/dashboard.component';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: DashboardComponent,\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class DashboardRoutingModule { }\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { DashboardComponent } from './dashboard/dashboard.component';\nimport { DashboardRoutingModule } from './dashboard-routing.module';\nimport { GridsterModule } from 'angular-gridster2';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\nimport { ClientsPanelComponent } from './dashboard/clients-panel/clients-panel.component';\nimport { ObjectsViewModule } from '../../shared/ui/objects-view/objects-view.module';\nimport { MatTableModule } from '@angular/material/table';\nimport { FlexModule } from '@angular/flex-layout';\nimport { InvoicesPanelComponent } from './dashboard/invoices-panel/invoices-panel.component';\n\n@NgModule({\n  declarations: [\n    DashboardComponent,\n    ClientsPanelComponent,\n    InvoicesPanelComponent\n  ],\n  imports: [\n    CommonModule,\n    DashboardRoutingModule,\n    GridsterModule,\n    MatButtonModule,\n    MatIconModule,\n    ObjectsViewModule,\n    MatTableModule,\n    FlexModule\n  ],\n  entryComponents: [\n    ClientsPanelComponent,\n    InvoicesPanelComponent,\n  ]\n})\nexport class DashboardModule { }\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3Jlc2VsbGVyL2Rhc2hib2FyZC9kYXNoYm9hcmQvY2xpZW50cy1wYW5lbC9jbGllbnRzLXBhbmVsLmNvbXBvbmVudC5zY3NzIn0= */\"","import { Component, OnInit } from '@angular/core';\nimport { ClientsApiService } from '../../../../shared/fleio-api/client-user/client/clients-api.service';\n\n@Component({\n  selector: 'app-clients-panel',\n  templateUrl: './clients-panel.component.html',\n  styleUrls: ['./clients-panel.component.scss']\n})\nexport class ClientsPanelComponent implements OnInit {\n  tableData: {\n    description: string;\n    number: number;\n  }[] = [];\n  displayedColumns: string[] = ['description', 'number'];\n  constructor(private clientsService: ClientsApiService) { }\n\n  ngOnInit() {\n    this.clientsService.getAction('summary').subscribe(response => {\n      this.tableData.push({\n        description: 'Total clients',\n        number: response.count\n      });\n      this.tableData.push({\n        description: 'New clients',\n        number: response.new\n      });\n    });\n  }\n\n}\n","module.exports = \".dashboard-wrapper {\\n  height: 700px;\\n  overflow: visible;\\n  margin-bottom: 100px;\\n}\\n\\n.dashboard-wrapper gridster {\\n  background: transparent;\\n  overflow: visible;\\n}\\n\\n.gridster-item-wrapper {\\n  padding: 70px 30px;\\n}\\n\\n.remove-gridster-item-btn {\\n  position: absolute;\\n  top: 0;\\n  right: 0;\\n}\\n\\n.gridster-item-title {\\n  position: absolute;\\n  top: 20px;\\n  font-size: 20px;\\n  left: 20px;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL2dpdGxhYi1ydW5uZXIvYnVpbGRzLzFVZkJYU1M2LzEvZmxlaW8vZmxlaW8vbmdmcm9udGVuZC9zcmMvYXBwL3Jlc2VsbGVyL2Rhc2hib2FyZC9kYXNoYm9hcmQvZGFzaGJvYXJkLmNvbXBvbmVudC5zY3NzIiwic3JjL2FwcC9yZXNlbGxlci9kYXNoYm9hcmQvZGFzaGJvYXJkL2Rhc2hib2FyZC5jb21wb25lbnQuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNFLGFBQUE7RUFDQSxpQkFBQTtFQUNBLG9CQUFBO0FDQ0Y7O0FERUE7RUFDRSx1QkFBQTtFQUNBLGlCQUFBO0FDQ0Y7O0FERUE7RUFDRSxrQkFBQTtBQ0NGOztBREVBO0VBQ0Usa0JBQUE7RUFDQSxNQUFBO0VBQ0EsUUFBQTtBQ0NGOztBREVBO0VBQ0Usa0JBQUE7RUFDQSxTQUFBO0VBQ0EsZUFBQTtFQUNBLFVBQUE7QUNDRiIsImZpbGUiOiJzcmMvYXBwL3Jlc2VsbGVyL2Rhc2hib2FyZC9kYXNoYm9hcmQvZGFzaGJvYXJkLmNvbXBvbmVudC5zY3NzIiwic291cmNlc0NvbnRlbnQiOlsiLmRhc2hib2FyZC13cmFwcGVyIHtcbiAgaGVpZ2h0OiA3MDBweDtcbiAgb3ZlcmZsb3c6IHZpc2libGU7XG4gIG1hcmdpbi1ib3R0b206IDEwMHB4O1xufVxuXG4uZGFzaGJvYXJkLXdyYXBwZXIgZ3JpZHN0ZXIge1xuICBiYWNrZ3JvdW5kOiB0cmFuc3BhcmVudDtcbiAgb3ZlcmZsb3c6IHZpc2libGU7XG59XG5cbi5ncmlkc3Rlci1pdGVtLXdyYXBwZXIge1xuICBwYWRkaW5nOiA3MHB4IDMwcHg7XG59XG5cbi5yZW1vdmUtZ3JpZHN0ZXItaXRlbS1idG4ge1xuICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gIHRvcDogMDtcbiAgcmlnaHQ6IDA7XG59XG5cbi5ncmlkc3Rlci1pdGVtLXRpdGxlIHtcbiAgcG9zaXRpb246IGFic29sdXRlO1xuICB0b3A6IDIwcHg7XG4gIGZvbnQtc2l6ZTogMjBweDtcbiAgbGVmdDogMjBweDtcbn1cbiIsIi5kYXNoYm9hcmQtd3JhcHBlciB7XG4gIGhlaWdodDogNzAwcHg7XG4gIG92ZXJmbG93OiB2aXNpYmxlO1xuICBtYXJnaW4tYm90dG9tOiAxMDBweDtcbn1cblxuLmRhc2hib2FyZC13cmFwcGVyIGdyaWRzdGVyIHtcbiAgYmFja2dyb3VuZDogdHJhbnNwYXJlbnQ7XG4gIG92ZXJmbG93OiB2aXNpYmxlO1xufVxuXG4uZ3JpZHN0ZXItaXRlbS13cmFwcGVyIHtcbiAgcGFkZGluZzogNzBweCAzMHB4O1xufVxuXG4ucmVtb3ZlLWdyaWRzdGVyLWl0ZW0tYnRuIHtcbiAgcG9zaXRpb246IGFic29sdXRlO1xuICB0b3A6IDA7XG4gIHJpZ2h0OiAwO1xufVxuXG4uZ3JpZHN0ZXItaXRlbS10aXRsZSB7XG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgdG9wOiAyMHB4O1xuICBmb250LXNpemU6IDIwcHg7XG4gIGxlZnQ6IDIwcHg7XG59Il19 */\"","import { Component, OnInit } from '@angular/core';\nimport { GridsterConfig, GridsterItem } from 'angular-gridster2';\nimport { ClientsPanelComponent } from './clients-panel/clients-panel.component';\nimport { InvoicesPanelComponent } from './invoices-panel/invoices-panel.component';\n\n@Component({\n  selector: 'app-dashboard',\n  templateUrl: './dashboard.component.html',\n  styleUrls: ['./dashboard.component.scss']\n})\nexport class DashboardComponent implements OnInit {\n  options: GridsterConfig;\n  dashboard: Array<GridsterItem>;\n\n  constructor() { }\n  itemChange(item, itemComponent) {\n  }\n  itemResize(item, itemComponent) {\n  }\n  removeItem(event, item) {\n   this.dashboard.splice(this.dashboard.indexOf(item), 1);\n  }\n  // addItem() {\n  //  this.dashboard.push({});\n  // }\n\n  ngOnInit() {\n    this.options = {\n      itemChangeCallback: this.itemChange,\n      itemResizeCallback: this.itemResize,\n      minRows: 50,\n      maxCols: 4,\n      displayGrid: 'none',\n      draggable: {\n        enabled: true,\n      },\n     };\n    this.dashboard = [\n      {\n        title: 'Clients',\n        component: ClientsPanelComponent,\n        cols: 2,\n        rows: 20,\n        y: 0,\n        resizeEnabled: false,\n        x: 2\n      },\n      {\n        title: 'Invoices',\n        component: InvoicesPanelComponent,\n        cols: 2,\n        rows: 28,\n        resizeEnabled: false,\n        y: 0,\n        x: 0\n      },\n    ];\n  }\n\n}\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3Jlc2VsbGVyL2Rhc2hib2FyZC9kYXNoYm9hcmQvaW52b2ljZXMtcGFuZWwvaW52b2ljZXMtcGFuZWwuY29tcG9uZW50LnNjc3MifQ== */\"","import { Component, OnInit } from '@angular/core';\nimport { InvoicesApiService } from '../../../../shared/fleio-api/billing/invoices/invoices-api.service';\n\nexport interface IInvoicesSummaryResponse {\n  paid: number;\n  unpaid: number;\n  cancelled: number;\n  refunded: number;\n}\n\n@Component({\n  selector: 'app-invoices-panel',\n  templateUrl: './invoices-panel.component.html',\n  styleUrls: ['./invoices-panel.component.scss']\n})\nexport class InvoicesPanelComponent implements OnInit {\n  tableData: {\n    description: string;\n    number: number;\n  }[] = [];\n  displayedColumns: string[] = ['description', 'number'];\n  constructor(private invoicesApi: InvoicesApiService) { }\n\n  ngOnInit() {\n    this.invoicesApi.getAction('summary').subscribe((response: IInvoicesSummaryResponse) => {\n      this.tableData.push({\n        description: 'Paid',\n        number: response.paid\n      });\n      this.tableData.push({\n        description: 'Unpaid',\n        number: response.unpaid\n      });\n      this.tableData.push({\n        description: 'Cancelled',\n        number: response.cancelled\n      });\n      this.tableData.push({\n        description: 'Refunded',\n        number: response.refunded\n      });\n    });\n  }\n\n}\n"],"sourceRoot":""}