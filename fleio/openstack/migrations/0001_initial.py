# Generated by Django 2.1 on 2018-09-10 12:43

from django.db import migrations, models
import django.db.models.deletion
import fleio.core.utils
import jsonfield.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('core', '0001_initial'),
        ('billing', '0001_initial_billing'),
    ]

    operations = [
        migrations.CreateModel(
            name='FloatingIp',
            fields=[
                ('id', models.CharField(max_length=36, primary_key=True, serialize=False, unique=True, verbose_name='Floating Ip UUID')),
                ('floating_ip_address', models.GenericIPAddressField()),
                ('status', models.CharField(max_length=10, verbose_name='Status')),
                ('description', models.CharField(blank=True, max_length=200, null=True)),
                ('fixed_ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('created_at', models.DateTimeField(blank=True, null=True)),
                ('updated_at', models.DateTimeField(blank=True, null=True)),
                ('revision_number', models.IntegerField(blank=True, null=True)),
                ('sync_version', models.BigIntegerField(default=0)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Image',
            fields=[
                ('id', models.CharField(max_length=36, primary_key=True, serialize=False, unique=True)),
                ('name', models.CharField(blank=True, max_length=255, null=True)),
                ('type', models.CharField(choices=[('template', 'Template'), ('application', 'Application'), ('snapshot', 'Snapshot'), ('backup', 'Backup'), ('deleted', 'Deleted')], db_index=True, default='template', max_length=11)),
                ('owner', models.CharField(blank=True, max_length=255, null=True)),
                ('status', models.CharField(blank=True, choices=[('queued', 'Queued'), ('saving', 'Saving'), ('active', 'Active'), ('killed', 'Killed'), ('deleted', 'Deleted'), ('pending_delete', 'Pending delete'), ('deactivated', 'Deactivated')], db_index=True, max_length=14, null=True)),
                ('size', models.BigIntegerField(blank=True, null=True)),
                ('virtual_size', models.BigIntegerField(blank=True, null=True)),
                ('created_at', models.DateTimeField(blank=True, null=True)),
                ('updated_at', models.DateTimeField(blank=True, null=True)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('os_distro', models.CharField(blank=True, choices=[('altlinux', 'Altlinux'), ('arch', 'Arch Linux'), ('centos', 'CentOS'), ('cirros', 'CirrOS'), ('debian', 'Debian'), ('dos', 'DOS'), ('fedora', 'Fedora'), ('freebsd', 'Freebsd'), ('gnome', 'Gnome'), ('macos', 'MacOS'), ('mageia', 'Mageia'), ('mandrake', 'Mandrake'), ('mandriva', 'Mandriva'), ('netbsd', 'NetBSD'), ('netware', 'Netware'), ('openbsd', 'OpenBSD'), ('opensuse', 'OpenSUSE'), ('rhel', 'RHEL'), ('rhl', 'RHL'), ('solaris', 'Solaris'), ('suse', 'Suse'), ('ubuntu', 'Ubuntu'), ('windows', 'Windows')], max_length=30, null=True)),
                ('os_version', models.CharField(blank=True, max_length=16, null=True)),
                ('architecture', models.CharField(blank=True, max_length=32, null=True)),
                ('min_disk', models.IntegerField()),
                ('min_ram', models.IntegerField()),
                ('protected', models.BooleanField(default=False)),
                ('visibility', models.CharField(blank=True, choices=[('private', 'Private'), ('public', 'Public'), ('shared', 'Shared'), ('community', 'Community')], db_index=True, max_length=10, null=True)),
                ('container_format', models.CharField(blank=True, choices=[('ami', 'ami'), ('ari', 'ari'), ('aki', 'aki'), ('bare', 'bare'), ('ovf', 'ovf'), ('ova', 'ova'), ('docker', 'docker')], max_length=10, null=True)),
                ('disk_format', models.CharField(blank=True, choices=[('ami', 'ami'), ('ari', 'ari'), ('aki', 'aki'), ('vhd', 'vhd'), ('vmdk', 'vmdk'), ('raw', 'raw'), ('qcow2', 'qcow2'), ('vdi', 'vdi'), ('iso', 'iso')], max_length=10, null=True)),
                ('properties', jsonfield.fields.JSONField(default={})),
                ('tags', jsonfield.fields.JSONField(default=[])),
                ('hw_qemu_guest_agent', models.BooleanField(default=False)),
                ('instance_uuid', models.CharField(blank=True, max_length=36, null=True)),
                ('sync_version', models.BigIntegerField(default=0)),
            ],
            options={
                'verbose_name_plural': 'Images',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ImageMembers',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('accepted', 'Accepted'), ('rejected', 'Rejected')], db_index=True, default='pending', max_length=15)),
                ('created_at', models.DateTimeField(blank=True, null=True)),
                ('updated_at', models.DateTimeField(blank=True, null=True)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('sync_version', models.BigIntegerField(default=0)),
                ('image', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='members', to='openstack.Image')),
            ],
            options={
                'verbose_name_plural': 'Image members',
            },
        ),
        migrations.CreateModel(
            name='Instance',
            fields=[
                ('id', models.CharField(db_index=True, max_length=36, primary_key=True, serialize=False, unique=True)),
                ('region', models.CharField(db_index=True, max_length=128)),
                ('user_id', models.CharField(blank=True, db_index=True, max_length=36, null=True)),
                ('name', models.CharField(blank=True, max_length=255, null=True)),
                ('description', models.CharField(blank=True, max_length=255, null=True)),
                ('addresses', jsonfield.fields.JSONField(default={})),
                ('accessIPv4', models.GenericIPAddressField(blank=True, null=True)),
                ('accessIPv6', models.GenericIPAddressField(blank=True, null=True)),
                ('flavor', models.CharField(blank=True, db_index=True, max_length=255, null=True)),
                ('hostId', models.CharField(blank=True, max_length=255, null=True)),
                ('image', models.CharField(blank=True, db_index=True, max_length=36, null=True)),
                ('key_name', models.CharField(blank=True, max_length=255, null=True)),
                ('config_drive', models.BooleanField(default=False)),
                ('availability_zone', models.CharField(blank=True, db_index=True, max_length=255, null=True)),
                ('auto_disk_config', models.BooleanField(default=False)),
                ('power_state', models.SmallIntegerField(default=0)),
                ('task_state', models.CharField(blank=True, max_length=255, null=True)),
                ('vm_state', models.CharField(blank=True, max_length=255, null=True)),
                ('volumes_attached', jsonfield.fields.JSONField(default=[])),
                ('created', models.DateTimeField(blank=True, null=True)),
                ('launched_at', models.DateTimeField(blank=True, db_index=True, null=True)),
                ('updated', models.DateTimeField(blank=True, db_index=True, null=True)),
                ('terminated_at', models.DateTimeField(blank=True, null=True)),
                ('security_groups', jsonfield.fields.JSONField(default=[])),
                ('status', models.CharField(db_index=True, default='UNKNOWN', max_length=255)),
                ('host_status', models.CharField(blank=True, max_length=255, null=True)),
                ('fault', jsonfield.fields.JSONField(blank=True, null=True)),
                ('extra', jsonfield.fields.JSONField(blank=True, null=True)),
                ('sync_version', models.BigIntegerField(default=0)),
            ],
            options={
                'verbose_name_plural': 'Instances',
                'ordering': ['-created'],
            },
        ),
        migrations.CreateModel(
            name='Network',
            fields=[
                ('id', models.CharField(db_index=True, max_length=36, primary_key=True, serialize=False, unique=True)),
                ('name', models.CharField(blank=True, max_length=255)),
                ('description', models.CharField(blank=True, max_length=255, null=True)),
                ('region', models.CharField(db_index=True, max_length=128)),
                ('project', models.CharField(blank=True, db_index=True, max_length=36, null=True)),
                ('shared', models.BooleanField(db_index=True, default=False)),
                ('router_external', models.BooleanField(db_index=True, default=False)),
                ('is_default', models.BooleanField(db_index=True, default=False)),
                ('status', models.CharField(default='UNKNOWN', max_length=32)),
                ('admin_state_up', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(blank=True, null=True)),
                ('updated_at', models.DateTimeField(blank=True, null=True)),
                ('sync_version', models.BigIntegerField(default=0)),
                ('extra', jsonfield.fields.JSONField(default={})),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='NetworkRbac',
            fields=[
                ('id', models.CharField(db_index=True, max_length=36, primary_key=True, serialize=False, unique=True)),
                ('object_id', models.CharField(db_index=True, max_length=36)),
                ('project_id', models.CharField(blank=True, db_index=True, max_length=255, null=True)),
                ('target_project', models.CharField(db_index=True, max_length=255)),
                ('action', models.CharField(db_index=True, max_length=255)),
                ('object_type', models.CharField(db_index=True, max_length=255)),
                ('sync_version', models.BigIntegerField(default=0)),
            ],
        ),
        migrations.CreateModel(
            name='OpenstackInstanceFlavor',
            fields=[
                ('id', models.CharField(max_length=36, primary_key=True, serialize=False, unique=True)),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True, max_length=1024)),
                ('memory_mb', models.IntegerField()),
                ('vcpus', models.IntegerField(default=1)),
                ('swap', models.IntegerField(default=0)),
                ('vcpu_weight', models.IntegerField(blank=True, null=True)),
                ('rxtx_factor', models.FloatField(blank=True, null=True)),
                ('root_gb', models.IntegerField(blank=True, null=True)),
                ('ephemeral_gb', models.IntegerField(blank=True, null=True)),
                ('disabled', models.BooleanField(default=True)),
                ('is_public', models.BooleanField(default=False)),
                ('deleted', models.BooleanField(default=False)),
                ('show_in_fleio', models.BooleanField(default=True)),
            ],
            options={
                'verbose_name_plural': 'Flavors',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='OpenstackRegion',
            fields=[
                ('id', models.CharField(max_length=64, primary_key=True, serialize=False, unique=True)),
                ('description', models.CharField(blank=True, max_length=255)),
                ('parent_region_id', models.CharField(blank=True, max_length=64)),
                ('extra', models.TextField(blank=True)),
                ('enabled', models.BooleanField(blank=True, default=True)),
                ('enable_volumes', models.BooleanField(blank=True, default=True)),
                ('enable_snapshots', models.BooleanField(blank=True, default=True)),
            ],
            options={
                'verbose_name_plural': 'Regions',
            },
        ),
        migrations.CreateModel(
            name='Port',
            fields=[
                ('id', models.CharField(db_index=True, max_length=36, primary_key=True, serialize=False, unique=True)),
                ('name', models.CharField(blank=True, max_length=255, null=True)),
                ('description', models.CharField(blank=True, max_length=255, null=True)),
                ('admin_state_up', models.BooleanField(default=True)),
                ('device_id', models.CharField(blank=True, db_index=True, max_length=255, null=True)),
                ('device_owner', models.CharField(blank=True, db_index=True, max_length=255, null=True)),
                ('fixed_ips', jsonfield.fields.JSONField(default={})),
                ('mac_address', models.CharField(blank=True, max_length=32, null=True)),
                ('security_groups', jsonfield.fields.JSONField(default=[])),
                ('sync_version', models.BigIntegerField(default=0)),
                ('extra', jsonfield.fields.JSONField(default={})),
                ('network', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='ports', to='openstack.Network')),
            ],
            options={
                'ordering': ['-sync_version'],
            },
        ),
        migrations.CreateModel(
            name='Project',
            fields=[
                ('id', models.BigIntegerField(default=fleio.core.utils.RandomId('openstack.Project'), primary_key=True, serialize=False, unique=True)),
                ('project_id', models.CharField(max_length=36, unique=True)),
                ('project_domain_id', models.CharField(blank=True, max_length=36)),
                ('deleted', models.BooleanField(default=False)),
                ('disabled', models.BooleanField(default=False)),
                ('fleio_disabled_reason', models.CharField(blank=True, choices=[('need_payment', 'need_payment'), ('admin_locked', 'admin_locked')], db_index=True, max_length=16, null=True)),
                ('extras', jsonfield.fields.JSONField(blank=True, null=True)),
                ('sync_version', models.BigIntegerField(default=0)),
                ('is_domain', models.BooleanField(default=False)),
                ('name', models.CharField(default=None, max_length=255, null=True)),
                ('description', models.CharField(default=None, max_length=1024, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('service', models.OneToOneField(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='openstack_project', to='billing.Service')),
            ],
            options={
                'verbose_name_plural': 'Services to projects',
            },
        ),
        migrations.CreateModel(
            name='QoSSpec',
            fields=[
                ('qos_specs_id', models.CharField(max_length=36, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(blank=True, null=True)),
                ('updated_at', models.DateTimeField(blank=True, null=True)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('sync_version', models.BigIntegerField(default=0)),
                ('name', models.CharField(max_length=255)),
                ('consumer', models.CharField(blank=True, max_length=255, null=True)),
                ('specs', jsonfield.fields.JSONField(default={})),
            ],
        ),
        migrations.CreateModel(
            name='Router',
            fields=[
                ('id', models.CharField(db_index=True, max_length=36, primary_key=True, serialize=False)),
                ('name', models.CharField(blank=True, max_length=255, null=True)),
                ('status', models.CharField(blank=True, max_length=16, null=True)),
                ('admin_state_up', models.BooleanField(default=True)),
                ('description', models.CharField(blank=True, max_length=255, null=True)),
                ('project_id', models.CharField(blank=True, db_index=True, max_length=36, null=True)),
                ('external_network_id', models.CharField(blank=True, db_index=True, max_length=36, null=True)),
                ('external_fixed_ips', jsonfield.fields.JSONField(default=[])),
                ('enable_snat', models.BooleanField(default=True)),
                ('availability_zones', jsonfield.fields.JSONField(default=[])),
                ('availability_hints', jsonfield.fields.JSONField(default=[])),
                ('distributed', models.BooleanField(default=False)),
                ('ha', models.BooleanField(default=False, verbose_name='High availability')),
                ('routes', jsonfield.fields.JSONField(default=[])),
                ('sync_version', models.BigIntegerField(default=0)),
                ('region', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='openstack.OpenstackRegion')),
            ],
        ),
        migrations.CreateModel(
            name='SecurityGroup',
            fields=[
                ('id', models.CharField(max_length=36, primary_key=True, serialize=False)),
                ('description', models.CharField(blank=True, max_length=255, null=True)),
                ('name', models.CharField(blank=True, max_length=255, null=True)),
                ('created_at', models.DateTimeField(blank=True, null=True)),
                ('updated_at', models.DateTimeField(blank=True, null=True)),
                ('sync_version', models.BigIntegerField(default=0)),
                ('project', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='openstack.Project', to_field='project_id')),
                ('region', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='openstack.OpenstackRegion')),
            ],
        ),
        migrations.CreateModel(
            name='SecurityGroupRule',
            fields=[
                ('id', models.CharField(max_length=36, primary_key=True, serialize=False)),
                ('description', models.CharField(blank=True, max_length=255, null=True)),
                ('direction', models.CharField(choices=[('ingress', 'Ingress'), ('egress', 'Egress')], max_length=12)),
                ('protocol', models.CharField(blank=True, max_length=40, null=True)),
                ('ethertype', models.CharField(blank=True, max_length=40, null=True)),
                ('port_range_min', models.IntegerField(blank=True, null=True)),
                ('port_range_max', models.IntegerField(blank=True, null=True)),
                ('remote_ip_prefix', models.CharField(blank=True, max_length=255, null=True)),
                ('revision_number', models.IntegerField(default=1)),
                ('sync_version', models.BigIntegerField(default=0)),
                ('project', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='openstack.Project', to_field='project_id')),
                ('remote_group', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='remote_group_rules', to='openstack.SecurityGroup')),
                ('security_group', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='security_group_rules', to='openstack.SecurityGroup')),
            ],
        ),
        migrations.CreateModel(
            name='Subnet',
            fields=[
                ('id', models.CharField(db_index=True, max_length=36, primary_key=True, serialize=False, unique=True)),
                ('name', models.CharField(blank=True, max_length=255, null=True)),
                ('description', models.CharField(blank=True, max_length=255, null=True)),
                ('project_id', models.CharField(blank=True, db_index=True, max_length=36, null=True)),
                ('subnetpool_id', models.CharField(blank=True, db_index=True, max_length=36, null=True)),
                ('ip_version', models.SmallIntegerField(choices=[(4, 'IPv4'), (6, 'IPv6')])),
                ('gateway_ip', models.GenericIPAddressField(blank=True, null=True)),
                ('cidr', models.CharField(max_length=64)),
                ('enable_dhcp', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(blank=True, null=True)),
                ('updated_at', models.DateTimeField(blank=True, null=True)),
                ('sync_version', models.BigIntegerField(default=0)),
                ('extra', jsonfield.fields.JSONField(default={})),
                ('allocation_pools', jsonfield.fields.JSONField(default=[])),
                ('network', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='openstack.Network')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='SubnetPool',
            fields=[
                ('id', models.CharField(db_index=True, max_length=36, primary_key=True, serialize=False)),
                ('name', models.CharField(blank=True, max_length=255, null=True)),
                ('description', models.CharField(blank=True, max_length=255, null=True)),
                ('project_id', models.CharField(blank=True, db_index=True, max_length=36, null=True)),
                ('region', models.CharField(db_index=True, max_length=128)),
                ('prefixes', jsonfield.fields.JSONField(default=[])),
                ('ip_version', models.PositiveSmallIntegerField(choices=[(4, 'IPv4'), (6, 'IPv6')])),
                ('default_prefixlen', models.PositiveSmallIntegerField()),
                ('min_prefixlen', models.PositiveSmallIntegerField()),
                ('max_prefixlen', models.PositiveSmallIntegerField()),
                ('shared', models.BooleanField(default=False)),
                ('default_quota', models.IntegerField(blank=True, null=True)),
                ('address_scope_id', models.UUIDField(blank=True, db_index=True, null=True)),
                ('is_default', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(blank=True, null=True)),
                ('updated_at', models.DateTimeField(blank=True, null=True)),
                ('sync_version', models.BigIntegerField(default=0)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Volume',
            fields=[
                ('id', models.CharField(max_length=36, primary_key=True, serialize=False, unique=True)),
                ('region', models.CharField(max_length=128)),
                ('user_id', models.CharField(blank=True, db_index=True, max_length=36, null=True)),
                ('name', models.CharField(blank=True, max_length=255, null=True)),
                ('description', models.CharField(blank=True, max_length=255, null=True)),
                ('status', models.CharField(blank=True, max_length=32)),
                ('attach_status', models.CharField(blank=True, max_length=255, null=True)),
                ('size', models.IntegerField()),
                ('type', models.CharField(blank=True, db_index=True, max_length=255, null=True)),
                ('consistencygroup_id', models.CharField(blank=True, db_index=True, max_length=36, null=True)),
                ('source_volid', models.CharField(blank=True, db_index=True, max_length=36, null=True)),
                ('snapshot_id', models.CharField(blank=True, db_index=True, max_length=36, null=True)),
                ('bootable', models.BooleanField(default=False)),
                ('multiattach', models.BooleanField(default=False)),
                ('availability_zone', models.CharField(blank=True, max_length=255, null=True)),
                ('migration_status', models.CharField(blank=True, max_length=255, null=True)),
                ('replication_status', models.CharField(blank=True, max_length=255, null=True)),
                ('created_at', models.DateTimeField(blank=True, null=True)),
                ('updated_at', models.DateTimeField(blank=True, null=True)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('sync_version', models.BigIntegerField(default=0)),
                ('extra', jsonfield.fields.JSONField(default={})),
                ('project', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='openstack.Project', to_field='project_id')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='VolumeAttachments',
            fields=[
                ('id', models.CharField(max_length=36, primary_key=True, serialize=False, unique=True)),
                ('volume_id', models.CharField(db_index=True, max_length=36)),
                ('server_id', models.CharField(blank=True, db_index=True, max_length=36, null=True)),
                ('sync_version', models.BigIntegerField(default=0)),
                ('extra', jsonfield.fields.JSONField(default={})),
            ],
        ),
        migrations.CreateModel(
            name='VolumeType',
            fields=[
                ('volume_type_id', models.CharField(max_length=36, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(blank=True, null=True)),
                ('updated_at', models.DateTimeField(blank=True, null=True)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('sync_version', models.BigIntegerField(default=0)),
                ('name', models.CharField(blank=True, max_length=255, null=True)),
                ('description', models.CharField(blank=True, max_length=255, null=True)),
                ('is_public', models.BooleanField(default=True)),
                ('qos_specs', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='openstack.QoSSpec')),
                ('region', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='openstack.OpenstackRegion')),
            ],
        ),
        migrations.CreateModel(
            name='VolumeTypeExtraSpec',
            fields=[
                ('id', models.CharField(max_length=72, primary_key=True, serialize=False)),
                ('sync_version', models.BigIntegerField(default=0)),
                ('created_at', models.DateTimeField(blank=True, null=True)),
                ('updated_at', models.DateTimeField(blank=True, null=True)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('key', models.CharField(max_length=255)),
                ('value', models.CharField(blank=True, max_length=255, null=True)),
                ('volume_type', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='openstack.VolumeType')),
            ],
        ),
        migrations.CreateModel(
            name='VolumeTypeToProject',
            fields=[
                ('id', models.CharField(max_length=72, primary_key=True, serialize=False)),
                ('sync_version', models.BigIntegerField(default=0)),
                ('project_id', models.CharField(max_length=36)),
                ('volume_type_id', models.CharField(max_length=36)),
            ],
        ),
        migrations.AlterUniqueTogether(
            name='volumetypetoproject',
            unique_together={('project_id', 'volume_type_id')},
        ),
        migrations.AddField(
            model_name='port',
            name='project',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='openstack.Project', to_field='project_id'),
        ),
        migrations.AddField(
            model_name='openstackinstanceflavor',
            name='region',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='flavors', to='openstack.OpenstackRegion'),
        ),
        migrations.AddField(
            model_name='openstackinstanceflavor',
            name='show_to_groups',
            field=models.ManyToManyField(blank=True, to='core.ClientGroup'),
        ),
        migrations.AddField(
            model_name='instance',
            name='project',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='openstack.Project', to_field='project_id'),
        ),
        migrations.AddField(
            model_name='imagemembers',
            name='member',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='openstack.Project', to_field='project_id'),
        ),
        migrations.AddField(
            model_name='image',
            name='project',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='openstack.Project', to_field='project_id'),
        ),
        migrations.AddField(
            model_name='image',
            name='region',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='openstack.OpenstackRegion'),
        ),
        migrations.AddField(
            model_name='floatingip',
            name='floating_network',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='openstack.Network'),
        ),
        migrations.AddField(
            model_name='floatingip',
            name='port',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='openstack.Port'),
        ),
        migrations.AddField(
            model_name='floatingip',
            name='project',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='openstack.Project', to_field='project_id'),
        ),
        migrations.AddField(
            model_name='floatingip',
            name='router',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='openstack.Router'),
        ),
        migrations.AlterUniqueTogether(
            name='project',
            unique_together={('service', 'project_id')},
        ),
        migrations.AlterUniqueTogether(
            name='openstackinstanceflavor',
            unique_together={('id', 'name', 'region')},
        ),
    ]
