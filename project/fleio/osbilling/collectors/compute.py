from __future__ import unicode_literals

import logging

from .event import Event, RawEvent
from .generic import GenericCollector
from ..models import BillingResource
from ..models import ResourceUsageLog

LOG = logging.getLogger(__name__)


class NovaCollector(GenericCollector):
    """Retrieve events generated by Nova and store them"""

    def __init__(self):
        super(NovaCollector, self).__init__()
        self.resource_type = 'instance'
        self.query_events = ['compute.instance.exists',
                             'compute.instance.create.end',
                             'compute.instance.delete.end',
                             'compute.instance.resize.revert.end',
                             'compute.instance.finish_resize.end',
                             'compute.instance.rebuild.end',
                             'compute.instance.update',
                             ]

    def store_event(self, event, region=None):
        """Store one event in db"""
        event = Event(event)
        # Get project_id from traits.project_id or if missing, from traits.tenant_id
        project_id = getattr(event.trait, 'project_id', None) or getattr(event.trait, 'tenant_id', None)
        # Get launched_at from traits.launched_at or if missing, from traits.created_at if present
        started_at = getattr(event.trait, 'launched_at', None) or getattr(event.trait, 'created_at', None)
        user_id = getattr(event.trait, 'user_id', None)
        resource_id = getattr(event.trait, 'instance_id', None)
        ended_at = getattr(event.trait, 'deleted_at', None)
        message_id = getattr(event, 'message_id', 'n/a')
        if started_at is None:
            # We ignore events without a resource start date
            LOG.debug('Ignored event: %s without launched_at' % message_id)
            return
        if resource_id is None:
            LOG.debug('Ignored event: %s without instance_id' % message_id)
            return

        return ResourceUsageLog.objects.add_event(resource_type=self.resource_type,
                                                  resource_uuid=resource_id,
                                                  start=started_at,
                                                  project_id=project_id,
                                                  user_id=user_id,
                                                  end=ended_at,
                                                  region=region,
                                                  traits=event.traits)

    def store_message_event(self, event_type, payload, metadata, region=None):
        """Store one event in db"""
        # Get the resource if available, else return
        logging.debug('Event type: {}, payload: {}, metadata: {}'.format(event_type, payload, metadata))
        try:
            resource = BillingResource.objects.get(name=self.resource_type, type='service')
        except BillingResource.DoesNotExist:
            LOG.info('Skip event processing for missing "{}" resource definition'.format(self.resource_type))
            return
        attributes = resource.definition.get('attributes', list())
        required_traits = {'project_id': 'string', 'tenant_id': 'string', 'launched_at': 'datetime',
                           'created_at': 'datetime', 'user_id': 'string', 'instance_id': 'string',
                           'deleted_at': 'datetime', 'display_name': 'string'}
        keep_traits = list(required_traits)  # TODO(tomo): py2to3 list(keys())
        overwrite_mappings = required_traits
        for attribute in attributes:
            name = attribute.get('name', None)
            value_type = attribute.get('type', None)
            if name and name not in keep_traits:
                keep_traits.append(name)
                if value_type and overwrite_mappings.get('name', None) != value_type:
                    overwrite_mappings[name] = value_type
        event = RawEvent(event_type=event_type,
                         payload=payload,
                         metadata=metadata,
                         keep_traits=keep_traits,
                         overwrite_mappings=overwrite_mappings,
                         region=region)
        project_id = getattr(event.trait, 'project_id', None) or getattr(event.trait, 'tenant_id', None)
        started_at = getattr(event.trait, 'launched_at', None) or getattr(event.trait, 'created_at', None)

        if event_type == 'compute.instance.update':
            # let's check if it's an instance state change
            new_state = payload.get('state', None)
            old_state = payload.get('old_state', None)
            if (new_state != old_state and
                    None not in (new_state, old_state) and
                    'deleted' not in (new_state, old_state)):
                # we have an instance state change
                # we consider the change timestamp when the event was emitted
                started_at = event.generated

        user_id = getattr(event.trait, 'user_id', None)
        resource_id = getattr(event.trait, 'instance_id', None)
        ended_at = getattr(event.trait, 'deleted_at', None)
        if not ended_at:
            if 'state' in payload and 'old_state' in payload:
                if payload['state'] == 'deleted' and payload['old_state'] == 'deleted':
                    ended_at = event.generated
        message_id = event.message_id
        if started_at is None:
            # We ignore events without a resource start date
            LOG.debug('Ignored event: %s without launched_at' % message_id)
            return
        if resource_id is None:
            LOG.debug('Ignored event: %s without instance_id' % message_id)
            return
        return ResourceUsageLog.objects.add_event(resource_type=self.resource_type,
                                                  resource_uuid=resource_id,
                                                  start=started_at,
                                                  project_id=project_id,
                                                  user_id=user_id,
                                                  end=ended_at,
                                                  region=region,
                                                  traits=event.traits)


class VersionedNovaCollector(GenericCollector):
    """Retrieve events generated by Nova and store them"""

    def __init__(self):
        super(VersionedNovaCollector, self).__init__()
        self.resource_type = 'instance'
        # TODO(erno): investigate what other events might come in here (for example stop, start, suspend)
        self.query_events = ['instance.exists',
                             'instance.create.end',
                             'instance.delete.end',
                             'instance.resize.revert.end',
                             'instance.finish_resize.end',
                             'instance.rebuild.end'
                             ]

    def store_event(self, event, region=None):
        """Store one event in db"""
        event = Event(event)
        # Get project_id from traits.project_id or if missing, from traits.tenant_id
        project_id = getattr(event.trait, 'project_id', None) or getattr(event.trait, 'tenant_id', None)
        # Get launched_at from traits.launched_at or if missing, from traits.created_at if present
        started_at = getattr(event.trait, 'launched_at', None) or getattr(event.trait, 'created_at', None)
        user_id = getattr(event.trait, 'user_id', None)
        resource_id = getattr(event.trait, 'instance_id', None)
        ended_at = getattr(event.trait, 'deleted_at', None)
        message_id = getattr(event, 'message_id', 'n/a')
        if started_at is None:
            # We ignore events without a resource start date
            LOG.debug('Ignored event: %s without launched_at' % message_id)
            return
        if resource_id is None:
            LOG.debug('Ignored event: %s without instance_id' % message_id)
            return

        return ResourceUsageLog.objects.add_event(resource_type=self.resource_type,
                                                  resource_uuid=resource_id,
                                                  start=started_at,
                                                  project_id=project_id,
                                                  user_id=user_id,
                                                  end=ended_at,
                                                  region=region,
                                                  traits=event.traits)

    def store_message_event(self, event_type, payload, metadata, region=None):
        """Store one event in db"""
        # Get the resource if available, else return
        try:
            resource = BillingResource.objects.get(name=self.resource_type, type='service')
        except BillingResource.DoesNotExist:
            LOG.info('Skip event processing for missing "{}" resource definition'.format(self.resource_type))
            return
        attributes = resource.definition.get('attributes', list())
        required_traits = {'project_id': 'string', 'tenant_id': 'string', 'launched_at': 'datetime',
                           'created_at': 'datetime', 'user_id': 'string', 'uuid': 'string',
                           'deleted_at': 'datetime', 'display_name': 'string'}
        keep_traits = list(required_traits)
        overwrite_mappings = required_traits
        for attribute in attributes:
            name = attribute.get('name', None)
            value_type = attribute.get('type', None)
            if name and name not in keep_traits:
                keep_traits.append(name)
                if value_type and overwrite_mappings.get('name', None) != value_type:
                    overwrite_mappings[name] = value_type
        event = RawEvent(event_type=event_type,
                         payload=payload['nova_object.data'],
                         metadata=metadata,
                         keep_traits=keep_traits,
                         overwrite_mappings=overwrite_mappings,
                         region=region)
        project_id = getattr(event.trait, 'project_id', None) or getattr(event.trait, 'tenant_id', None)
        started_at = getattr(event.trait, 'launched_at', None) or getattr(event.trait, 'created_at', None)
        user_id = getattr(event.trait, 'user_id', None)
        resource_id = getattr(event.trait, 'uuid', None)
        ended_at = getattr(event.trait, 'deleted_at', None)
        message_id = event.message_id
        if started_at is None:
            # We ignore events without a resource start date
            LOG.debug('Ignored event: %s without launched_at' % message_id)
            return
        if resource_id is None:
            LOG.debug('Ignored event: %s without instance_id' % message_id)
            return
        return ResourceUsageLog.objects.add_event(resource_type=self.resource_type,
                                                  resource_uuid=resource_id,
                                                  start=started_at,
                                                  project_id=project_id,
                                                  user_id=user_id,
                                                  end=ended_at,
                                                  region=region,
                                                  traits=event.traits)
